!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=66)}([function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var i=n(1),r=n(2),o=n(6),a=n(7),s=n(8),l=n(9),c=n(10),u=n(11),d=n(12),p=(window.chrome,function(){function e(e,t,n){this.data={},this.tag=t,this.name=e,this.data=n}return e.prototype.register=function(){e.languages.push(this)},e.prototype.get=function(e,t){for(var n=e.split("."),i=this.data,r=0,o=n;r<o.length;r++){i=i[o[r]]}if(void 0!==t)for(var a in t)i=i.split("{{"+a+"}}").join(t[a]);return i},e.prototype.setDefault=function(){e.default=this},e.load=function(e){var t=this;void 0===e&&(e=function(){}),r.b.LANGUAGE.get((function(n){var o=n[r.b.LANGUAGE.tag];void 0!==o&&"automatic"!==o||(o=t.automatic()),i.a.info("Using language configuration "+o),t.languages.forEach((function(n,i){n.tag===o&&(t.current=n),i===t.languages.length-1&&e()}))}))},e.automatic=function(){var e=this;return window.navigator.languages.find((function(t){return t.length>=5&&(void 0===e.default||t!==e.default.tag)}))},e.init=function(){new e("Deutsche (DE)","de-DE",u).register(),new e("Espa√±ol (ES)","es-ES",c).register();var t=new e("English (US)","en-US",o);t.register(),t.setDefault(),new e("English (Steef)","en-STEEF",d).register(),new e("Fran√ßais (FR)","fr-FR",s).register(),new e("Italiano (IT)","it-IT",l).register(),new e("Svenska (SE)","sv-SE",a).register()},e.get=function(e,t){return void 0===this.current&&(this.current=this.default),this.current.get(e,t)},e.languages=[],e}())},function(e,t,n){"use strict";var i="[Stadia+]",r=function(){this.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %cüìÉ "+e.join(" "),"color: black")},this.warning=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %cüòü "+e.join(" "),"color: orange")},this.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %c‚ùå "+e.join(" "),"color: red; font-weight: 700")},this.component=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.log(i+" %cüß© "+e.join(" "),"color: darkgreen")},this.image=function(e,t,n){var i=function(e,t){return{string:"+",style:"font-size: 1px; padding: "+Math.floor(t/2)+"px "+Math.floor(e/2)+"px; line-height: 0;"}}(t,n);console.log("%c"+i.string,i.style+"background: url("+e+"); background-size: "+t+"px "+n+"px; color: transparent;")}};t.a=new r},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return o}));var i=window.chrome,r=function(){function e(e,t){this.name=e,this.tag=t}return e.prototype.get=function(e){void 0===e&&(e=function(){}),i.storage.local.get([this.tag],e)},e.prototype.set=function(e,t){var n;void 0===t&&(t=function(){}),i.storage.local.set(((n={})[this.tag]=e,n),t)},e.get=function(e,t){void 0===t&&(t=function(){}),i.storage.local.get(e.map((function(e){return e.tag})),t)},e.set=function(e,t){void 0===t&&(t=function(){}),i.storage.local.get(e,t)},e.clear=function(){i.storage.local.clear()},e.CODEC=new e("Codec","codec"),e.RESOLUTION=new e("Resolution","resolution"),e.MONITOR_STATS=new e("Monitor Stats","monitor-stats"),e}(),o=function(){function e(e,t){this.name=e,this.tag=t}return e.prototype.get=function(e){void 0===e&&(e=function(){}),i.storage.sync.get([this.tag],e)},e.prototype.set=function(e,t){var n;void 0===t&&(t=function(){}),i.storage.sync.set(((n={})[this.tag]=e,n),t)},e.get=function(e,t){void 0===t&&(t=function(){}),i.storage.sync.get(e.map((function(e){return e.tag})),t)},e.set=function(e,t){void 0===t&&(t=function(){}),i.storage.sync.get(e,t)},e.clear=function(){i.storage.local.clear()},e.LIBRARY_GAMES=new e("Library Games","games"),e.LIBRARY_SORT_ORDER=new e("Sort Order","sort-order"),e.LIBRARY_SORT_DIRECTION=new e("Sort Direction","sort-direction"),e.LANGUAGE=new e("Language","language"),e}()},function(e,t,n){"use strict";var i,r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},i=[],r=0;r<e.length;r++){var o=e[r],l=t.base?o[0]+t.base:o[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var d=s(u),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==d?(a[d].references++,a[d].updater(p)):a.push({identifier:u,updater:m(p,t),references:1}),i.push(u)}return i}function c(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var u,d=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=d(t,r);else{var o=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function f(e,t,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),o&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var h=null,v=0;function m(e,t){var n,i,r;if(t.singleton){var o=v++;n=h||(h=c(t)),i=p.bind(null,n,o,!1),r=p.bind(null,n,o,!0)}else n=c(t),i=f.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var r=s(n[i]);a[r].references--}for(var o=l(e,t),c=0;c<n.length;c++){var u=s(n[c]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}n=o}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(a=i,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),o=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}var a,s,l;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);i&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return a}));var i=n(13),r=n.n(i),o=(n(22),n(24),function(){function e(e,t){this.element=e,t.style=void 0!==t.style?t.style:a.DARK,t.onChange=void 0!==t.onChange?t.onChange:function(){},t.beforeChange=void 0!==t.beforeChange?t.beforeChange:function(){},this.element.classList.add("stadiaplus_dropdown",t.style);try{this.slimselect=new r.a({select:this.element,showSearch:!1,placeholder:t.placeholder,onChange:t.onChange,beforeOnChange:t.beforeChange})}catch(e){}}return e.prototype.get=function(){return this.slimselect.selected()},e.prototype.set=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];1===e.length?this.slimselect.set(e[0]):this.slimselect.setData(e)},e.prototype.search=function(e){return this.slimselect.search(e)},e.prototype.destroy=function(){void 0!==this.slimselect&&this.slimselect.destroy(),this.element.classList.remove("stadiaplus_dropdown"),this.element=null},e}()),a=function(){function e(){}return e.SLIMSELECT=null,e.SLIMSELECT_LARGE="style-slimselect-large",e.LIGHT="style-light",e.DARK="style-dark",e}()},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"Stadia+","ready-text":"The extension is all ready to go. Just fire up Stadia and start playing! üéÆ","launch-button":"Launch Stadia","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit"},"settings-page":{"title":"Settings","language":"Language"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"}},"component":{"enabled":"Component {{name}} has been enabled.","disabled":"Component {{name}} has been disabled."},"clock":{"name":"Clock"},"force-codec":{"name":"Force Codec"},"force-resolution":{"name":"Force Resolution","note":"Note: the set value is the maximum resolution Stadia will attempt to achieve. If your computer is not capable of rendering the resolution or it is not available with the current data usage option, it will not be displayed."},"library-filter":{"name":"Library Filter","recent":"Recent","alphabetical":"Alphabetical","random":"Random","show-hidden":"Show Hidden"},"network-monitor":{"name":"Network Monitor","heading-visible":"Visible Stats","button-label":"Monitor"},"ratings":{"name":"Ratings","source-name":"Metacritic"},"store-filter":{"name":"Store Filter"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"snackbar":{"reload-to-update":"Reload the page to see your changes.","hide-game":"A game has been hidden.","show-game":"A game is no longer hidden."},"automatic":"Automatic","vp9":"VP9","h264":"H264","apply":"Apply","4k":"4K","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Utvecklat av {{name}}"},"main-page":{"title":"Stadia+","ready-text":"Till√§gget √§r redo att k√∂ra. Bara starta Stadia och b√∂rja spela! üéÆ","launch-button":"Starta Stadia","help-button":"Hj√§lp & FAQ","discord":"Discord","reddit":"Reddit"},"settings-page":{"title":"Inst√§llningar","language":"Spr√•k"},"developer-page":{"title":"Utvecklare","clear-cache-button":"Rensa Cache","storage":"Lagring"}},"component":{"enabled":"Komponenten {{name}} √§r nu aktiverad.","disabled":"Komponenten {{name}} √§r inte l√§ngre aktiverad."},"clock":{"name":"Klocka"},"force-codec":{"name":"P√•tvigad Codec"},"force-resolution":{"name":"P√•tvingad Uppl√∂sning","note":"Observera: det satta v√§rdet √§r den maximala uppl√∂sningen Stadia kommer f√∂rs√∂ka uppn√•. Om din dator inte klarar av att rendera uppl√∂sningen eller den inte √§r tillg√§nglig med dina nuvarande datainst√§llningar kommer inte den p√•tvingade uppl√∂sningen visas."},"library-filter":{"name":"Biblioteksfilter","recent":"Senaste","alphabetical":"Alfabetiskt","random":"Slumpm√§ssigt","show-hidden":"Visa G√∂mda"},"network-monitor":{"name":"N√§tverks√∂vervakning","heading-visible":"Synlig Statistik","button-label":"√ñvervakning"},"ratings":{"name":"Recensioner","source-name":"Metacritic"},"store-filter":{"name":"Butiksfiltrering"},"ui-tab":{"name":"Stadia+ Gr√§nssnittstabb","button-label":"Stadia+"},"snackbar":{"reload-to-update":"Uppdatera sidan f√∂r att se dina √§ndringar.","hide-game":"Ett spel har g√∂mts.","show-game":"Ett spel √§r inte l√§ngre g√∂mt."},"automatic":"Automatisk","vp9":"VP9","h264":"H264","apply":"Till√§mpa","4k":"4K","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"Stadia+","ready-text":"The extension is all ready to go. Just fire up Stadia and start playing! üéÆ","launch-button":"Launch Stadia","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit"},"settings-page":{"title":"Settings","language":"Language"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"}},"component":{"enabled":"Le composant {{name}} a √©t√© activ√©.","disabled":"Le composant {{name}} a √©t√© d√©sactiv√©."},"clock":{"name":"Horloge"},"force-codec":{"name":"Forcer Codec"},"force-resolution":{"name":"Forcer R√©solution","note":"Remarque: la valeur d√©finie est la r√©solution maximale que Stadia tentera d\'atteindre. Si votre ordinateur ne peut pas resituer cette r√©solution ou que l\'option de consommation des donn√©es ne le permets pas, elle ne sera pas utilis√©e."},"library-filter":{"name":"Filtre biblioth√®que","recent":"R√©cent","alphabetical":"Alphab√©tique","random":"Al√©atoire","show-hidden":"Montrer cach√©"},"network-monitor":{"name":"Moniteur r√©seau","heading-visible":"Statistiques visibles","button-label":"Moniteur"},"ratings":{"name":"√âvaluations","source-name":"M√©tacritique"},"store-filter":{"name":"Filtre Magasin"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"snackbar":{"reload-to-update":"Rechargez la page pour voir vos modifications.","hide-game":"Un jeu a √©t√© cach√©.","show-game":"Un jeu n\'est plus cach√©."},"automatic":"Automatique","vp9":"VP9","h264":"H264","apply":"Appliquer","4k":"4K","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Sviluppato da {{name}}"},"main-page":{"title":"Stadia+","ready-text":"L\'estensione √® pronta per l\'uso. Avvia Stadia e iniziare a giocare! üéÆ","launch-button":"Avvia Stadia","help-button":"Aiuto & FAQ","discord":"Discord","reddit":"Reddit"},"settings-page":{"title":"Impostazioni","language":"Lingua"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"}},"component":{"enabled":"Il componente {{name}} √® stato attivato.","disabled":"Il componente {{name}} √® stato disattivato."},"clock":{"name":"Orologio"},"force-codec":{"name":"Forza Codec"},"force-resolution":{"name":"Forza Risoluzione","note":"Nota: il valore impostato √® la massima risoluzione che Stadia tenter√† di raggiungere. Se il tuo computer non √® in grado di renderizzare la risoluzione, o non √® disponibile con l\'opzione di utilizzo dei dati corrente, non verr√† visualizzato."},"library-filter":{"name":"Filtro Libreria","recent":"Recente","alphabetical":"Alfabetico","random":"Casuale","show-hidden":"Mostra Nascosti"},"network-monitor":{"name":"Monitor di Rete","heading-visible":"Statistiche Visibili","button-label":"Monitor"},"ratings":{"name":"Valutazioni","source-name":"Metacritic"},"store-filter":{"name":"Filtro Negozio"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"snackbar":{"reload-to-update":"Ricarica la pagina per vedere i cambiamenti.","hide-game":"Un gioco √® stato nascosto.","show-game":"Un gioco non √® pi√π nascosto."},"automatic":"Automatico","vp9":"VP9","h264":"H264","apply":"Applica","4k":"4K","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"Stadia+","ready-text":"The extension is all ready to go. Just fire up Stadia and start playing! üéÆ","launch-button":"Launch Stadia","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit"},"settings-page":{"title":"Settings","language":"Language"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"}},"component":{"enabled":"El componente {{name}}  ha sido habilitado.","disabled":"El componente {{name}} ha sido deshabilitado."},"clock":{"name":"Reloj"},"force-codec":{"name":"Fuerza C√≥dec"},"force-resolution":{"name":"Fuerza Resoluci√≥n","note":"Nota: el valor establecido es la resoluci√≥n m√°xima que Stadia intentar√° lograr. Si su computadora no es capaz de procesar la resoluci√≥n o no est√° disponible con la opci√≥n de uso de datos actual, no se mostrar√°."},"library-filter":{"name":"Filtro Biblioteca","recent":"Reciente","alphabetical":"Alfab√©tico","random":"Aleatorio","show-hidden":"Mostrar oculto"},"network-monitor":{"name":"Monitor de red","heading-visible":"Estad√≠sticas visibles","button-label":"Monitor"},"ratings":{"name":"Calificaciones","source-name":"Metacr√≠tico"},"store-filter":{"name":"Filtro de tienda"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"snackbar":{"reload-to-update":"Vuelva a cargar la p√°gina para ver sus cambios.","hide-game":"Un juego ha sido escondido.","show-game":"Un juego ya no est√° oculto."},"automatic":"Autom√°tico","vp9":"VP9","h264":"H264","apply":"Aplicar","4k":"4K","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"Stadia+","ready-text":"The extension is all ready to go. Just fire up Stadia and start playing! üéÆ","launch-button":"Launch Stadia","help-button":"Help & FAQ","discord":"Discord","reddit":"Reddit"},"settings-page":{"title":"Settings","language":"Language"},"developer-page":{"title":"Developer","clear-cache-button":"Clear Cache","storage":"Storage"}},"component":{"enabled":"Komponente {{name}} wurde aktiviert.","disabled":"Komponente {{name}} wurde deaktiviert."},"clock":{"name":"Uhr"},"force-codec":{"name":"Codec erzwingen"},"force-resolution":{"name":"Aufl√∂sung erzwingen","note":"Anmerkung: Die gew√§hlte Aufl√∂sung ist die Maximale, die Stadia verweden wird. Falls Ihr Computer diese Aufl√∂sung nicht darstellen kann oder nicht genug Bandbreite zu Verf√ºgung steht, wird eine kleinere Aufl√∂sung verwendet."},"library-filter":{"name":"Sammlungsfilter","recent":"Neuste","alphabetical":"Alphabetisch","random":"Zuf√§llig","show-hidden":"Zeige Versteckte"},"network-monitor":{"name":"Netwerkmonitor","heading-visible":"Sichtbare Statistiken","button-label":"Monitor"},"ratings":{"name":"Bewertungen","source-name":"Metacritic"},"store-filter":{"name":"Store Filter"},"ui-tab":{"name":"Stadia+ UI Tab","button-label":"Stadia+"},"snackbar":{"reload-to-update":"Seite neu laden um die √Ñnderung anzuzeigen.","hide-game":"Ein Spiel wurde versteckt.","show-game":"Ein Spiel ist nicht mehr versteckt."},"automatic":"Automatisch","vp9":"VP9","h264":"H264","apply":"Anwenden","4k":"4K","1080p":"1080p"}')},function(e){e.exports=JSON.parse('{"popup":{"footer":{"credit":"Developed by {{name}}"},"main-page":{"title":"The Stadia+","ready-text":"The extension is all ready to go. Just fire up the Stadia and start playing! üéÆ","launch-button":"Launch The Stadia","help-button":"The Help & The FAQ","discord":"The Discord","reddit":"The Reddit"},"settings-page":{"title":"The Settings","language":"The Language"},"developer-page":{"title":"Developer","clear-cache-button":"Clear The Cache","storage":"The Storage"}},"component":{"enabled":"The {{name}} has been enabled.","disabled":"The {{name}} has been disabled."},"clock":{"name":"Clock"},"force-codec":{"name":"Force Codec"},"force-resolution":{"name":"Force Resolution","note":"Note: the set value is the maximum resolution the Stadia will attempt to achieve. If your computer is not capable of rendering the resolution or it is not available with the current data usage option, it will not be displayed."},"library-filter":{"name":"Library Filter","recent":"Recent","alphabetical":"Alphabetical","random":"Random","show-hidden":"Show Hidden"},"network-monitor":{"name":"Network Monitor","heading-visible":"The Visible Stats","button-label":"The Monitor"},"ratings":{"name":"Ratings","source-name":"The Metacritic"},"store-filter":{"name":"Store Filter"},"ui-tab":{"name":"The Stadia+ UI Tab","button-label":"The Stadia+"},"snackbar":{"reload-to-update":"Reload the page to see the changes.","hide-game":"The game has been hidden.","show-game":"The game is no longer hidden."},"automatic":"Automatic","vp9":"VP9","h264":"H264","apply":"Apply","4k":"4K","1080p":"1080p"}')},function(e,t,n){window,e.exports=function(){return(n={},e.m=t=[function(e,t,n){"use strict";function i(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}var r;t.__esModule=!0,t.hasClassInTree=function(e,t){function n(e,t){return t&&e&&e.classList&&e.classList.contains(t)?e:null}return n(e,t)||function e(t,i){return t&&t!==document?n(t,i)?t:e(t.parentNode,i):null}(e,t)},t.ensureElementInView=function(e,t){var n=e.scrollTop+e.offsetTop,i=n+e.clientHeight,r=t.offsetTop,o=r+t.clientHeight;r<n?e.scrollTop-=n-r:i<o&&(e.scrollTop+=o-i)},t.putContent=function(e,t,n){var i=e.offsetHeight,r=e.getBoundingClientRect(),o=n?r.top:r.top-i,a=n?r.bottom:r.bottom+i;return o<=0?"below":a>=window.innerHeight?"above":n?t:"below"},t.debounce=function(e,t,n){var i;return void 0===t&&(t=100),void 0===n&&(n=!1),function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];var a=self,s=n&&!i;clearTimeout(i),i=setTimeout((function(){i=null,n||e.apply(a,r)}),t),s&&e.apply(a,r)}},t.isValueInArrayOfObjects=function(e,t,n){if(!Array.isArray(e))return e[t]===n;for(var i=0,r=e;i<r.length;i++){var o=r[i];if(o&&o[t]&&o[t]===n)return!0}return!1},t.highlight=function(e,t,n){var i=e,r=new RegExp("("+t.trim()+")(?![^<]*>[^<>]*</)","i");if(!e.match(r))return e;var o=e.match(r).index,a=o+e.match(r)[0].toString().length,s=e.substring(o,a);return i.replace(r,'<mark class="'+n+'">'+s+"</mark>")},"function"!=typeof(r=window).CustomEvent&&(i.prototype=r.Event.prototype,r.CustomEvent=i)},function(e,t,n){"use strict";t.__esModule=!0;var i=(r.prototype.newOption=function(e){return{id:e.id?e.id:String(Math.floor(1e8*Math.random())),value:e.value?e.value:"",text:e.text?e.text:"",innerHTML:e.innerHTML?e.innerHTML:"",selected:!!e.selected&&e.selected,display:void 0===e.display||e.display,disabled:!!e.disabled&&e.disabled,placeholder:!!e.placeholder&&e.placeholder,class:e.class?e.class:void 0,data:e.data?e.data:{}}},r.prototype.add=function(e){this.data.push({id:String(Math.floor(1e8*Math.random())),value:e.value,text:e.text,innerHTML:"",selected:!1,display:!0,disabled:!1,placeholder:!1,class:void 0,data:{}})},r.prototype.parseSelectData=function(){this.data=[];for(var e=0,t=this.main.select.element.childNodes;e<t.length;e++){var n=t[e];if("OPTGROUP"===n.nodeName){for(var i={label:n.label,options:[]},r=0,o=n.childNodes;r<o.length;r++){var a=o[r];if("OPTION"===a.nodeName){var s=this.pullOptionData(a);i.options.push(s),s.placeholder&&""!==s.text.trim()&&(this.main.config.placeholderText=s.text)}}this.data.push(i)}else"OPTION"===n.nodeName&&(s=this.pullOptionData(n),this.data.push(s),s.placeholder&&""!==s.text.trim()&&(this.main.config.placeholderText=s.text))}},r.prototype.pullOptionData=function(e){return{id:!!e.dataset&&e.dataset.id||String(Math.floor(1e8*Math.random())),value:e.value,text:e.text,innerHTML:e.innerHTML,selected:e.selected,disabled:e.disabled,placeholder:"true"===e.dataset.placeholder,class:e.className,style:e.style.cssText,data:e.dataset}},r.prototype.setSelectedFromSelect=function(){if(this.main.config.isMultiple){for(var e=[],t=0,n=this.main.select.element.options;t<n.length;t++){var i=n[t];if(i.selected){var r=this.getObjectFromData(i.value,"value");r&&r.id&&e.push(r.id)}}this.setSelected(e,"id")}else{var o=this.main.select.element;if(-1!==o.selectedIndex){var a=o.options[o.selectedIndex].value;this.setSelected(a,"value")}}},r.prototype.setSelected=function(e,t){void 0===t&&(t="id");for(var n=0,i=this.data;n<i.length;n++){var r=i[n];if(r.hasOwnProperty("label")){if(r.hasOwnProperty("options")){var o=r.options;if(o)for(var a=0,s=o;a<s.length;a++){var l=s[a];l.placeholder||(l.selected=this.shouldBeSelected(l,e,t))}}}else r.selected=this.shouldBeSelected(r,e,t)}},r.prototype.shouldBeSelected=function(e,t,n){if(void 0===n&&(n="id"),Array.isArray(t))for(var i=0,r=t;i<r.length;i++){var o=r[i];if(n in e&&String(e[n])===String(o))return!0}else if(n in e&&String(e[n])===String(t))return!0;return!1},r.prototype.getSelected=function(){for(var e={text:"",placeholder:this.main.config.placeholderText},t=[],n=0,i=this.data;n<i.length;n++){var r=i[n];if(r.hasOwnProperty("label")){if(r.hasOwnProperty("options")){var o=r.options;if(o)for(var a=0,s=o;a<s.length;a++){var l=s[a];l.selected&&(this.main.config.isMultiple?t.push(l):e=l)}}}else r.selected&&(this.main.config.isMultiple?t.push(r):e=r)}return this.main.config.isMultiple?t:e},r.prototype.addToSelected=function(e,t){if(void 0===t&&(t="id"),this.main.config.isMultiple){var n=[],i=this.getSelected();if(Array.isArray(i))for(var r=0,o=i;r<o.length;r++){var a=o[r];n.push(a[t])}n.push(e),this.setSelected(n,t)}},r.prototype.removeFromSelected=function(e,t){if(void 0===t&&(t="id"),this.main.config.isMultiple){for(var n=[],i=0,r=this.getSelected();i<r.length;i++){var o=r[i];String(o[t])!==String(e)&&n.push(o[t])}this.setSelected(n,t)}},r.prototype.onDataChange=function(){this.main.onChange&&this.isOnChangeEnabled&&this.main.onChange(JSON.parse(JSON.stringify(this.getSelected())))},r.prototype.getObjectFromData=function(e,t){void 0===t&&(t="id");for(var n=0,i=this.data;n<i.length;n++){var r=i[n];if(t in r&&String(r[t])===String(e))return r;if(r.hasOwnProperty("options")){var o=r;if(o.options)for(var a=0,s=o.options;a<s.length;a++){var l=s[a];if(String(l[t])===String(e))return l}}}return null},r.prototype.search=function(e){if(""!==(this.searchValue=e).trim()){var t=this.main.config.searchFilter,n=this.data.slice(0);e=e.trim();var i=n.map((function(n){if(n.hasOwnProperty("options")){var i=n,r=[];if(i.options&&(r=i.options.filter((function(n){return t(n,e)}))),0!==r.length){var o=Object.assign({},i);return o.options=r,o}}return n.hasOwnProperty("text")&&t(n,e)?n:null}));this.filtered=i.filter((function(e){return e}))}else this.filtered=null},r);function r(e){this.contentOpen=!1,this.contentPosition="below",this.isOnChangeEnabled=!0,this.main=e.main,this.searchValue="",this.data=[],this.filtered=null,this.parseSelectData(),this.setSelectedFromSelect()}function o(e){return void 0!==e.text||(console.error("Data object option must have at least have a text value. Check object: "+JSON.stringify(e)),!1)}t.Data=i,t.validateData=function(e){if(!e)return console.error("Data must be an array of objects"),!1;for(var t=0,n=0,i=e;n<i.length;n++){var r=i[n];if(r.hasOwnProperty("label")){if(r.hasOwnProperty("options")){var a=r.options;if(a)for(var s=0,l=a;s<l.length;s++)o(l[s])||t++}}else o(r)||t++}return 0===t},t.validateOption=o},function(e,t,n){"use strict";t.__esModule=!0;var i=n(3),r=n(4),o=n(5),a=n(1),s=n(0),l=(c.prototype.validate=function(e){var t="string"==typeof e.select?document.querySelector(e.select):e.select;if(!t)throw new Error("Could not find select element");if("SELECT"!==t.tagName)throw new Error("Element isnt of type select");return t},c.prototype.selected=function(){if(this.config.isMultiple){for(var e=[],t=0,n=r=this.data.getSelected();t<n.length;t++){var i=n[t];e.push(i.value)}return e}var r;return(r=this.data.getSelected())?r.value:""},c.prototype.set=function(e,t,n,i){void 0===t&&(t="value"),void 0===n&&(n=!0),void 0===i&&(i=!0),this.config.isMultiple&&!Array.isArray(e)?this.data.addToSelected(e,t):this.data.setSelected(e,t),this.select.setValue(),this.data.onDataChange(),this.render(),n&&this.close()},c.prototype.setSelected=function(e,t,n,i){void 0===t&&(t="value"),void 0===n&&(n=!0),void 0===i&&(i=!0),this.set(e,t,n,i)},c.prototype.setData=function(e){if(a.validateData(e)){var t=JSON.parse(JSON.stringify(e)),n=this.data.getSelected();if(this.config.isAjax&&n)if(this.config.isMultiple)for(var i=0,r=n.reverse();i<r.length;i++){var o=r[i];t.unshift(o)}else t.unshift(this.data.getSelected()),t.unshift({text:"",placeholder:!0});this.select.create(t),this.data.parseSelectData(),this.data.setSelectedFromSelect()}else console.error("Validation problem on: #"+this.select.element.id)},c.prototype.addData=function(e){a.validateData([e])?(this.data.add(this.data.newOption(e)),this.select.create(this.data.data),this.data.parseSelectData(),this.data.setSelectedFromSelect(),this.render()):console.error("Validation problem on: #"+this.select.element.id)},c.prototype.open=function(){var e=this;if(this.config.isEnabled&&!this.data.contentOpen){if(this.beforeOpen&&this.beforeOpen(),this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.plus.classList.add("ss-cross"):this.slim.singleSelected&&(this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-down"),this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-up")),this.slim[this.config.isMultiple?"multiSelected":"singleSelected"].container.classList.add("above"===this.data.contentPosition?this.config.openAbove:this.config.openBelow),this.config.addToBody){var t=this.slim.container.getBoundingClientRect();this.slim.content.style.top=t.top+t.height+window.scrollY+"px",this.slim.content.style.left=t.left+window.scrollX+"px",this.slim.content.style.width=t.width+"px"}if(this.slim.content.classList.add(this.config.open),"up"===this.config.showContent.toLowerCase()?this.moveContentAbove():"down"===this.config.showContent.toLowerCase()?this.moveContentBelow():"above"===s.putContent(this.slim.content,this.data.contentPosition,this.data.contentOpen)?this.moveContentAbove():this.moveContentBelow(),!this.config.isMultiple){var n=this.data.getSelected();if(n){var i=n.id,r=this.slim.list.querySelector('[data-id="'+i+'"]');r&&s.ensureElementInView(this.slim.list,r)}}setTimeout((function(){e.data.contentOpen=!0,e.config.searchFocus&&e.slim.search.input.focus(),e.afterOpen&&e.afterOpen()}),this.config.timeoutDelay)}},c.prototype.close=function(){var e=this;this.data.contentOpen&&(this.beforeClose&&this.beforeClose(),this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openAbove),this.slim.multiSelected.container.classList.remove(this.config.openBelow),this.slim.multiSelected.plus.classList.remove("ss-cross")):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openAbove),this.slim.singleSelected.container.classList.remove(this.config.openBelow),this.slim.singleSelected.arrowIcon.arrow.classList.add("arrow-down"),this.slim.singleSelected.arrowIcon.arrow.classList.remove("arrow-up")),this.slim.content.classList.remove(this.config.open),this.data.contentOpen=!1,this.search(""),setTimeout((function(){e.slim.content.removeAttribute("style"),e.data.contentPosition="below",e.config.isMultiple&&e.slim.multiSelected?(e.slim.multiSelected.container.classList.remove(e.config.openAbove),e.slim.multiSelected.container.classList.remove(e.config.openBelow)):e.slim.singleSelected&&(e.slim.singleSelected.container.classList.remove(e.config.openAbove),e.slim.singleSelected.container.classList.remove(e.config.openBelow)),e.slim.search.input.blur(),e.afterClose&&e.afterClose()}),this.config.timeoutDelay))},c.prototype.moveContentAbove=function(){var e=0;this.config.isMultiple&&this.slim.multiSelected?e=this.slim.multiSelected.container.offsetHeight:this.slim.singleSelected&&(e=this.slim.singleSelected.container.offsetHeight);var t=e+this.slim.content.offsetHeight-1;this.slim.content.style.margin="-"+t+"px 0 0 0",this.slim.content.style.height=t-e+1+"px",this.slim.content.style.transformOrigin="center bottom",this.data.contentPosition="above",this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openBelow),this.slim.multiSelected.container.classList.add(this.config.openAbove)):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openBelow),this.slim.singleSelected.container.classList.add(this.config.openAbove))},c.prototype.moveContentBelow=function(){this.data.contentPosition="below",this.config.isMultiple&&this.slim.multiSelected?(this.slim.multiSelected.container.classList.remove(this.config.openAbove),this.slim.multiSelected.container.classList.add(this.config.openBelow)):this.slim.singleSelected&&(this.slim.singleSelected.container.classList.remove(this.config.openAbove),this.slim.singleSelected.container.classList.add(this.config.openBelow))},c.prototype.enable=function(){this.config.isEnabled=!0,this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.container.classList.remove(this.config.disabled):this.slim.singleSelected&&this.slim.singleSelected.container.classList.remove(this.config.disabled),this.select.triggerMutationObserver=!1,this.select.element.disabled=!1,this.slim.search.input.disabled=!1,this.select.triggerMutationObserver=!0},c.prototype.disable=function(){this.config.isEnabled=!1,this.config.isMultiple&&this.slim.multiSelected?this.slim.multiSelected.container.classList.add(this.config.disabled):this.slim.singleSelected&&this.slim.singleSelected.container.classList.add(this.config.disabled),this.select.triggerMutationObserver=!1,this.select.element.disabled=!0,this.slim.search.input.disabled=!0,this.select.triggerMutationObserver=!0},c.prototype.search=function(e){if(this.data.searchValue!==e)if(this.slim.search.input.value=e,this.config.isAjax){var t=this;this.config.isSearching=!0,this.render(),this.ajax&&this.ajax(e,(function(n){t.config.isSearching=!1,Array.isArray(n)?(n.unshift({text:"",placeholder:!0}),t.setData(n),t.data.search(e),t.render()):"string"==typeof n?t.slim.options(n):t.render()}))}else this.data.search(e),this.render()},c.prototype.setSearchText=function(e){this.config.searchText=e},c.prototype.render=function(){this.config.isMultiple?this.slim.values():(this.slim.placeholder(),this.slim.deselect()),this.slim.options()},c.prototype.destroy=function(e){void 0===e&&(e=null);var t=e?document.querySelector("."+e+".ss-main"):this.slim.container,n=e?document.querySelector("[data-ssid="+e+"]"):this.select.element;if(t&&n&&(n.style.display="",delete n.dataset.ssid,n.slim=null,t.parentElement&&t.parentElement.removeChild(t),this.config.addToBody)){var i=e?document.querySelector("."+e+".ss-content"):this.slim.content;if(!i)return;document.body.removeChild(i)}},c);function c(e){var t=this;this.ajax=null,this.addable=null,this.beforeOnChange=null,this.onChange=null,this.beforeOpen=null,this.afterOpen=null,this.beforeClose=null,this.afterClose=null;var n=this.validate(e);n.dataset.ssid&&this.destroy(n.dataset.ssid),e.ajax&&(this.ajax=e.ajax),e.addable&&(this.addable=e.addable),this.config=new i.Config({select:n,isAjax:!!e.ajax,showSearch:e.showSearch,searchPlaceholder:e.searchPlaceholder,searchText:e.searchText,searchingText:e.searchingText,searchFocus:e.searchFocus,searchHighlight:e.searchHighlight,searchFilter:e.searchFilter,closeOnSelect:e.closeOnSelect,showContent:e.showContent,placeholderText:e.placeholder,allowDeselect:e.allowDeselect,allowDeselectOption:e.allowDeselectOption,hideSelectedOption:e.hideSelectedOption,deselectLabel:e.deselectLabel,isEnabled:e.isEnabled,valuesUseText:e.valuesUseText,showOptionTooltips:e.showOptionTooltips,selectByGroup:e.selectByGroup,limit:e.limit,timeoutDelay:e.timeoutDelay,addToBody:e.addToBody}),this.select=new r.Select({select:n,main:this}),this.data=new a.Data({main:this}),this.slim=new o.Slim({main:this}),this.select.element.parentNode&&this.select.element.parentNode.insertBefore(this.slim.container,this.select.element.nextSibling),e.data?this.setData(e.data):this.render(),document.addEventListener("click",(function(e){e.target&&!s.hasClassInTree(e.target,t.config.id)&&t.close()})),"auto"===this.config.showContent&&window.addEventListener("scroll",s.debounce((function(e){t.data.contentOpen&&("above"===s.putContent(t.slim.content,t.data.contentPosition,t.data.contentOpen)?t.moveContentAbove():t.moveContentBelow())})),!1),e.beforeOnChange&&(this.beforeOnChange=e.beforeOnChange),e.onChange&&(this.onChange=e.onChange),e.beforeOpen&&(this.beforeOpen=e.beforeOpen),e.afterOpen&&(this.afterOpen=e.afterOpen),e.beforeClose&&(this.beforeClose=e.beforeClose),e.afterClose&&(this.afterClose=e.afterClose),this.config.isEnabled||this.disable()}t.default=l},function(e,t,n){"use strict";t.__esModule=!0;var i=(r.prototype.searchFilter=function(e,t){return-1!==e.text.toLowerCase().indexOf(t.toLowerCase())},r);function r(e){this.id="",this.isMultiple=!1,this.isAjax=!1,this.isSearching=!1,this.showSearch=!0,this.searchFocus=!0,this.searchHighlight=!1,this.closeOnSelect=!0,this.showContent="auto",this.searchPlaceholder="Search",this.searchText="No Results",this.searchingText="Searching...",this.placeholderText="Select Value",this.allowDeselect=!1,this.allowDeselectOption=!1,this.hideSelectedOption=!1,this.deselectLabel="x",this.isEnabled=!0,this.valuesUseText=!1,this.showOptionTooltips=!1,this.selectByGroup=!1,this.limit=0,this.timeoutDelay=200,this.addToBody=!1,this.main="ss-main",this.singleSelected="ss-single-selected",this.arrow="ss-arrow",this.multiSelected="ss-multi-selected",this.add="ss-add",this.plus="ss-plus",this.values="ss-values",this.value="ss-value",this.valueText="ss-value-text",this.valueDelete="ss-value-delete",this.content="ss-content",this.open="ss-open",this.openAbove="ss-open-above",this.openBelow="ss-open-below",this.search="ss-search",this.searchHighlighter="ss-search-highlight",this.addable="ss-addable",this.list="ss-list",this.optgroup="ss-optgroup",this.optgroupLabel="ss-optgroup-label",this.optgroupLabelSelectable="ss-optgroup-label-selectable",this.option="ss-option",this.optionSelected="ss-option-selected",this.highlighted="ss-highlighted",this.disabled="ss-disabled",this.hide="ss-hide",this.id="ss-"+Math.floor(1e5*Math.random()),this.style=e.select.style.cssText,this.class=e.select.className.split(" "),this.isMultiple=e.select.multiple,this.isAjax=e.isAjax,this.showSearch=!1!==e.showSearch,this.searchFocus=!1!==e.searchFocus,this.searchHighlight=!0===e.searchHighlight,this.closeOnSelect=!1!==e.closeOnSelect,e.showContent&&(this.showContent=e.showContent),this.isEnabled=!1!==e.isEnabled,e.searchPlaceholder&&(this.searchPlaceholder=e.searchPlaceholder),e.searchText&&(this.searchText=e.searchText),e.searchingText&&(this.searchingText=e.searchingText),e.placeholderText&&(this.placeholderText=e.placeholderText),this.allowDeselect=!0===e.allowDeselect,this.allowDeselectOption=!0===e.allowDeselectOption,this.hideSelectedOption=!0===e.hideSelectedOption,e.deselectLabel&&(this.deselectLabel=e.deselectLabel),e.valuesUseText&&(this.valuesUseText=e.valuesUseText),e.showOptionTooltips&&(this.showOptionTooltips=e.showOptionTooltips),e.selectByGroup&&(this.selectByGroup=e.selectByGroup),e.limit&&(this.limit=e.limit),e.searchFilter&&(this.searchFilter=e.searchFilter),null!=e.timeoutDelay&&(this.timeoutDelay=e.timeoutDelay),this.addToBody=!0===e.addToBody}t.Config=i},function(e,t,n){"use strict";t.__esModule=!0;var i=(r.prototype.setValue=function(){if(this.main.data.getSelected()){if(this.main.config.isMultiple)for(var e=this.main.data.getSelected(),t=0,n=this.element.options;t<n.length;t++){var i=n[t];i.selected=!1;for(var r=0,o=e;r<o.length;r++)o[r].value===i.value&&(i.selected=!0)}else e=this.main.data.getSelected(),this.element.value=e?e.value:"";this.main.data.isOnChangeEnabled=!1,this.element.dispatchEvent(new CustomEvent("change",{bubbles:!0})),this.main.data.isOnChangeEnabled=!0}},r.prototype.addAttributes=function(){this.element.tabIndex=-1,this.element.style.display="none",this.element.dataset.ssid=this.main.config.id},r.prototype.addEventListeners=function(){var e=this;this.element.addEventListener("change",(function(t){e.main.data.setSelectedFromSelect(),e.main.render()}))},r.prototype.addMutationObserver=function(){var e=this;this.main.config.isAjax||(this.mutationObserver=new MutationObserver((function(t){e.triggerMutationObserver&&(e.main.data.parseSelectData(),e.main.data.setSelectedFromSelect(),e.main.render(),t.forEach((function(t){"class"===t.attributeName&&e.main.slim.updateContainerDivClass(e.main.slim.container)})))})),this.observeMutationObserver())},r.prototype.observeMutationObserver=function(){this.mutationObserver&&this.mutationObserver.observe(this.element,{attributes:!0,childList:!0,characterData:!0})},r.prototype.disconnectMutationObserver=function(){this.mutationObserver&&this.mutationObserver.disconnect()},r.prototype.create=function(e){this.element.innerHTML="";for(var t=0,n=e;t<n.length;t++){var i=n[t];if(i.hasOwnProperty("options")){var r=i,o=document.createElement("optgroup");if(o.label=r.label,r.options)for(var a=0,s=r.options;a<s.length;a++){var l=s[a];o.appendChild(this.createOption(l))}this.element.appendChild(o)}else this.element.appendChild(this.createOption(i))}},r.prototype.createOption=function(e){var t=document.createElement("option");return t.value=e.value||e.text,t.innerHTML=e.innerHTML||e.text,e.selected&&(t.selected=e.selected),e.disabled&&(t.disabled=!0),e.placeholder&&t.setAttribute("data-placeholder","true"),e.class&&e.class.split(" ").forEach((function(e){t.classList.add(e)})),e.data&&"object"==typeof e.data&&Object.keys(e.data).forEach((function(n){t.setAttribute("data-"+n,e.data[n])})),t},r);function r(e){this.triggerMutationObserver=!0,this.element=e.select,this.main=e.main,this.element.disabled&&(this.main.config.isEnabled=!1),this.addAttributes(),this.addEventListeners(),this.mutationObserver=null,this.addMutationObserver(),this.element.slim=e.main}t.Select=i},function(e,t,n){"use strict";t.__esModule=!0;var i=n(0),r=n(1),o=(a.prototype.containerDiv=function(){var e=document.createElement("div");return e.style.cssText=this.main.config.style,this.updateContainerDivClass(e),e},a.prototype.updateContainerDivClass=function(e){this.main.config.class=this.main.select.element.className.split(" "),e.className="",e.classList.add(this.main.config.id),e.classList.add(this.main.config.main);for(var t=0,n=this.main.config.class;t<n.length;t++){var i=n[t];""!==i.trim()&&e.classList.add(i)}},a.prototype.singleSelectedDiv=function(){var e=this,t=document.createElement("div");t.classList.add(this.main.config.singleSelected);var n=document.createElement("span");n.classList.add("placeholder"),t.appendChild(n);var i=document.createElement("span");i.innerHTML=this.main.config.deselectLabel,i.classList.add("ss-deselect"),i.onclick=function(t){t.stopPropagation(),e.main.config.isEnabled&&e.main.set("")},t.appendChild(i);var r=document.createElement("span");r.classList.add(this.main.config.arrow);var o=document.createElement("span");return o.classList.add("arrow-down"),r.appendChild(o),t.appendChild(r),t.onclick=function(){e.main.config.isEnabled&&(e.main.data.contentOpen?e.main.close():e.main.open())},{container:t,placeholder:n,deselect:i,arrowIcon:{container:r,arrow:o}}},a.prototype.placeholder=function(){var e=this.main.data.getSelected();if(null===e||e&&e.placeholder){var t=document.createElement("span");t.classList.add(this.main.config.disabled),t.innerHTML=this.main.config.placeholderText,this.singleSelected&&(this.singleSelected.placeholder.innerHTML=t.outerHTML)}else{var n="";e&&(n=e.innerHTML&&!0!==this.main.config.valuesUseText?e.innerHTML:e.text),this.singleSelected&&(this.singleSelected.placeholder.innerHTML=e?n:"")}},a.prototype.deselect=function(){if(this.singleSelected){if(!this.main.config.allowDeselect)return void this.singleSelected.deselect.classList.add("ss-hide");""===this.main.selected()?this.singleSelected.deselect.classList.add("ss-hide"):this.singleSelected.deselect.classList.remove("ss-hide")}},a.prototype.multiSelectedDiv=function(){var e=this,t=document.createElement("div");t.classList.add(this.main.config.multiSelected);var n=document.createElement("div");n.classList.add(this.main.config.values),t.appendChild(n);var i=document.createElement("div");i.classList.add(this.main.config.add);var r=document.createElement("span");return r.classList.add(this.main.config.plus),r.onclick=function(t){e.main.data.contentOpen&&(e.main.close(),t.stopPropagation())},i.appendChild(r),t.appendChild(i),t.onclick=function(t){e.main.config.isEnabled&&(t.target.classList.contains(e.main.config.valueDelete)||(e.main.data.contentOpen?e.main.close():e.main.open()))},{container:t,values:n,add:i,plus:r}},a.prototype.values=function(){if(this.multiSelected){for(var e,t=this.multiSelected.values.childNodes,n=this.main.data.getSelected(),i=[],r=0,o=t;r<o.length;r++){var a=o[r];e=!0;for(var s=0,l=n;s<l.length;s++){var c=l[s];String(c.id)===String(a.dataset.id)&&(e=!1)}e&&i.push(a)}for(var u=0,d=i;u<d.length;u++){var p=d[u];p.classList.add("ss-out"),this.multiSelected.values.removeChild(p)}for(t=this.multiSelected.values.childNodes,c=0;c<n.length;c++){e=!1;for(var f=0,h=t;f<h.length;f++)a=h[f],String(n[c].id)===String(a.dataset.id)&&(e=!0);e||(0!==t.length&&HTMLElement.prototype.insertAdjacentElement?0===c?this.multiSelected.values.insertBefore(this.valueDiv(n[c]),t[c]):t[c-1].insertAdjacentElement("afterend",this.valueDiv(n[c])):this.multiSelected.values.appendChild(this.valueDiv(n[c])))}if(0===n.length){var v=document.createElement("span");v.classList.add(this.main.config.disabled),v.innerHTML=this.main.config.placeholderText,this.multiSelected.values.innerHTML=v.outerHTML}}},a.prototype.valueDiv=function(e){var t=this,n=document.createElement("div");n.classList.add(this.main.config.value),n.dataset.id=e.id;var i=document.createElement("span");i.classList.add(this.main.config.valueText),i.innerHTML=e.innerHTML&&!0!==this.main.config.valuesUseText?e.innerHTML:e.text,n.appendChild(i);var r=document.createElement("span");return r.classList.add(this.main.config.valueDelete),r.innerHTML=this.main.config.deselectLabel,r.onclick=function(n){n.preventDefault(),n.stopPropagation();var i=!1;if(t.main.config.isEnabled){if(t.main.beforeOnChange||(i=!0),t.main.beforeOnChange){for(var r=t.main.data.getSelected(),o=JSON.parse(JSON.stringify(r)),a=0;a<o.length;a++)o[a].id===e.id&&o.splice(a,1);!1!==t.main.beforeOnChange(o)&&(i=!0)}i&&(t.main.data.removeFromSelected(e.id,"id"),t.main.render(),t.main.select.setValue(),t.main.data.onDataChange())}},n.appendChild(r),n},a.prototype.contentDiv=function(){var e=document.createElement("div");return e.classList.add(this.main.config.content),e},a.prototype.searchDiv=function(){var e=this,t=document.createElement("div"),n=document.createElement("input"),i=document.createElement("div");t.classList.add(this.main.config.search);var o={container:t,input:n};return this.main.config.showSearch||(t.classList.add(this.main.config.hide),n.readOnly=!0),n.type="search",n.placeholder=this.main.config.searchPlaceholder,n.tabIndex=0,n.setAttribute("aria-label",this.main.config.searchPlaceholder),n.setAttribute("autocapitalize","off"),n.setAttribute("autocomplete","off"),n.setAttribute("autocorrect","off"),n.onclick=function(t){setTimeout((function(){""===t.target.value&&e.main.search("")}),10)},n.onkeydown=function(t){"ArrowUp"===t.key?(e.main.open(),e.highlightUp(),t.preventDefault()):"ArrowDown"===t.key?(e.main.open(),e.highlightDown(),t.preventDefault()):"Tab"===t.key?e.main.data.contentOpen?e.main.close():setTimeout((function(){e.main.close()}),e.main.config.timeoutDelay):"Enter"===t.key&&t.preventDefault()},n.onkeyup=function(t){var r=t.target;if("Enter"===t.key){if(e.main.addable&&t.ctrlKey)return i.click(),t.preventDefault(),void t.stopPropagation();var o=e.list.querySelector("."+e.main.config.highlighted);o&&o.click()}else"ArrowUp"===t.key||"ArrowDown"===t.key||("Escape"===t.key?e.main.close():e.main.config.showSearch&&e.main.data.contentOpen?e.main.search(r.value):n.value="");t.preventDefault(),t.stopPropagation()},n.onfocus=function(){e.main.open()},t.appendChild(n),this.main.addable&&(i.classList.add(this.main.config.addable),i.innerHTML="+",i.onclick=function(t){if(e.main.addable){t.preventDefault(),t.stopPropagation();var n=e.search.input.value;if(""===n.trim())return void e.search.input.focus();var i=e.main.addable(n),o="";if(!i)return;"object"==typeof i?r.validateOption(i)&&(e.main.addData(i),o=i.value?i.value:i.text):(e.main.addData(e.main.data.newOption({text:i,value:i})),o=i),e.main.search(""),setTimeout((function(){e.main.set(o,"value",!1,!1)}),100),e.main.config.closeOnSelect&&setTimeout((function(){e.main.close()}),100)}},t.appendChild(i),o.addable=i),o},a.prototype.highlightUp=function(){var e=this.list.querySelector("."+this.main.config.highlighted),t=null;if(e)for(t=e.previousSibling;null!==t&&t.classList.contains(this.main.config.disabled);)t=t.previousSibling;else{var n=this.list.querySelectorAll("."+this.main.config.option+":not(."+this.main.config.disabled+")");t=n[n.length-1]}if(t&&t.classList.contains(this.main.config.optgroupLabel)&&(t=null),null===t){var r=e.parentNode;if(r.classList.contains(this.main.config.optgroup)&&r.previousSibling){var o=r.previousSibling.querySelectorAll("."+this.main.config.option+":not(."+this.main.config.disabled+")");o.length&&(t=o[o.length-1])}}t&&(e&&e.classList.remove(this.main.config.highlighted),t.classList.add(this.main.config.highlighted),i.ensureElementInView(this.list,t))},a.prototype.highlightDown=function(){var e=this.list.querySelector("."+this.main.config.highlighted),t=null;if(e)for(t=e.nextSibling;null!==t&&t.classList.contains(this.main.config.disabled);)t=t.nextSibling;else t=this.list.querySelector("."+this.main.config.option+":not(."+this.main.config.disabled+")");if(null===t&&null!==e){var n=e.parentNode;n.classList.contains(this.main.config.optgroup)&&n.nextSibling&&(t=n.nextSibling.querySelector("."+this.main.config.option+":not(."+this.main.config.disabled+")"))}t&&(e&&e.classList.remove(this.main.config.highlighted),t.classList.add(this.main.config.highlighted),i.ensureElementInView(this.list,t))},a.prototype.listDiv=function(){var e=document.createElement("div");return e.classList.add(this.main.config.list),e},a.prototype.options=function(e){void 0===e&&(e="");var t,n=this.main.data.filtered||this.main.data.data;if((this.list.innerHTML="")!==e)return(t=document.createElement("div")).classList.add(this.main.config.option),t.classList.add(this.main.config.disabled),t.innerHTML=e,void this.list.appendChild(t);if(this.main.config.isAjax&&this.main.config.isSearching)return(t=document.createElement("div")).classList.add(this.main.config.option),t.classList.add(this.main.config.disabled),t.innerHTML=this.main.config.searchingText,void this.list.appendChild(t);if(0===n.length){var i=document.createElement("div");return i.classList.add(this.main.config.option),i.classList.add(this.main.config.disabled),i.innerHTML=this.main.config.searchText,void this.list.appendChild(i)}for(var r=function(e){if(e.hasOwnProperty("label")){var t=e,n=document.createElement("div");n.classList.add(o.main.config.optgroup);var i=document.createElement("div");i.classList.add(o.main.config.optgroupLabel),o.main.config.selectByGroup&&o.main.config.isMultiple&&i.classList.add(o.main.config.optgroupLabelSelectable),i.innerHTML=t.label,n.appendChild(i);var r=t.options;if(r){for(var a=0,s=r;a<s.length;a++){var l=s[a];n.appendChild(o.option(l))}if(o.main.config.selectByGroup&&o.main.config.isMultiple){var c=o;i.addEventListener("click",(function(e){e.preventDefault(),e.stopPropagation();for(var t=0,i=n.children;t<i.length;t++){var r=i[t];-1!==r.className.indexOf(c.main.config.option)&&r.click()}}))}}o.list.appendChild(n)}else o.list.appendChild(o.option(e))},o=this,a=0,s=n;a<s.length;a++)r(s[a])},a.prototype.option=function(e){if(e.placeholder){var t=document.createElement("div");return t.classList.add(this.main.config.option),t.classList.add(this.main.config.hide),t}var n=document.createElement("div");n.classList.add(this.main.config.option),e.class&&e.class.split(" ").forEach((function(e){n.classList.add(e)})),e.style&&(n.style.cssText=e.style);var r=this.main.data.getSelected();n.dataset.id=e.id,this.main.config.searchHighlight&&this.main.slim&&e.innerHTML&&""!==this.main.slim.search.input.value.trim()?n.innerHTML=i.highlight(e.innerHTML,this.main.slim.search.input.value,this.main.config.searchHighlighter):e.innerHTML&&(n.innerHTML=e.innerHTML),this.main.config.showOptionTooltips&&n.textContent&&n.setAttribute("title",n.textContent);var o=this;n.addEventListener("click",(function(t){t.preventDefault(),t.stopPropagation();var n=this.dataset.id;if(!0===e.selected&&o.main.config.allowDeselectOption){var i=!1;if(o.main.beforeOnChange&&o.main.config.isMultiple||(i=!0),o.main.beforeOnChange&&o.main.config.isMultiple){for(var a=o.main.data.getSelected(),s=JSON.parse(JSON.stringify(a)),l=0;l<s.length;l++)s[l].id===n&&s.splice(l,1);!1!==o.main.beforeOnChange(s)&&(i=!0)}i&&(o.main.config.isMultiple?(o.main.data.removeFromSelected(n,"id"),o.main.render(),o.main.select.setValue(),o.main.data.onDataChange()):o.main.set(""))}else{if(e.disabled||e.selected)return;if(o.main.config.limit&&Array.isArray(r)&&o.main.config.limit<=r.length)return;if(o.main.beforeOnChange){var c=void 0,u=JSON.parse(JSON.stringify(o.main.data.getObjectFromData(n)));u.selected=!0,o.main.config.isMultiple?(c=JSON.parse(JSON.stringify(r))).push(u):c=JSON.parse(JSON.stringify(u)),!1!==o.main.beforeOnChange(c)&&o.main.set(n,"id",o.main.config.closeOnSelect)}else o.main.set(n,"id",o.main.config.closeOnSelect)}}));var a=r&&i.isValueInArrayOfObjects(r,"id",e.id);return(e.disabled||a)&&(n.onclick=null,o.main.config.allowDeselectOption||n.classList.add(this.main.config.disabled),o.main.config.hideSelectedOption&&n.classList.add(this.main.config.hide)),a?n.classList.add(this.main.config.optionSelected):n.classList.remove(this.main.config.optionSelected),n},a);function a(e){this.main=e.main,this.container=this.containerDiv(),this.content=this.contentDiv(),this.search=this.searchDiv(),this.list=this.listDiv(),this.options(),this.singleSelected=null,this.multiSelected=null,this.main.config.isMultiple?(this.multiSelected=this.multiSelectedDiv(),this.multiSelected&&this.container.appendChild(this.multiSelected.container)):(this.singleSelected=this.singleSelectedDiv(),this.container.appendChild(this.singleSelected.container)),this.main.config.addToBody?(this.content.classList.add(this.main.config.id),document.body.appendChild(this.content)):this.container.appendChild(this.content),this.content.appendChild(this.search.container),this.content.appendChild(this.list)}t.Slim=o}],e.c=n,e.d=function(t,n,i){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:i})},e.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(e.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(i,r,function(e){return t[e]}.bind(null,r));return i},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},e.p="",e(e.s=2)).default;function e(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var t,n}()},function(e,t,n){var i=n(3),r=n(50);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){var i=n(3),r=n(52);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){var i=n(3),r=n(54);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){var i=n(3),r=n(56);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){var i=n(3),r=n(58);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){var i=n(3),r=n(60);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){var i=n(3),r=n(62);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){"use strict";(function(e,n){
/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
var i=Object.freeze({});function r(e){return null==e}function o(e){return null!=e}function a(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function l(e){return null!==e&&"object"==typeof e}var c=Object.prototype.toString;function u(e){return"[object Object]"===c.call(e)}function d(e){return"[object RegExp]"===c.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function f(e){return o(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function h(e){return null==e?"":Array.isArray(e)||u(e)&&e.toString===c?JSON.stringify(e,null,2):String(e)}function v(e){var t=parseFloat(e);return isNaN(t)?e:t}function m(e,t){for(var n=Object.create(null),i=e.split(","),r=0;r<i.length;r++)n[i[r]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}m("slot,component",!0);var g=m("key,ref,slot,slot-scope,is");function y(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function _(e,t){return b.call(e,t)}function w(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var x=/-(\w)/g,S=w((function(e){return e.replace(x,(function(e,t){return t?t.toUpperCase():""}))})),C=w((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),k=/\B([A-Z])/g,O=w((function(e){return e.replace(k,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var i=arguments.length;return i?i>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function T(e,t){t=t||0;for(var n=e.length-t,i=new Array(n);n--;)i[n]=e[n+t];return i}function L(e,t){for(var n in t)e[n]=t[n];return e}function E(e){for(var t={},n=0;n<e.length;n++)e[n]&&L(t,e[n]);return t}function $(e,t,n){}var M=function(e,t,n){return!1},j=function(e){return e};function D(e,t){if(e===t)return!0;var n=l(e),i=l(t);if(!n||!i)return!n&&!i&&String(e)===String(t);try{var r=Array.isArray(e),o=Array.isArray(t);if(r&&o)return e.length===t.length&&e.every((function(e,n){return D(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(r||o)return!1;var a=Object.keys(e),s=Object.keys(t);return a.length===s.length&&a.every((function(n){return D(e[n],t[n])}))}catch(e){return!1}}function I(e,t){for(var n=0;n<e.length;n++)if(D(e[n],t))return n;return-1}function P(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var R=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:M,isReservedAttr:M,isUnknownElement:M,getTagNamespace:$,parsePlatformTagName:j,mustUseProp:M,async:!0,_lifecycleHooks:N},H=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function U(e,t,n,i){Object.defineProperty(e,t,{value:n,enumerable:!!i,writable:!0,configurable:!0})}var B=new RegExp("[^"+H.source+".$_\\d]");var z,V="__proto__"in{},q="undefined"!=typeof window,J="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,G=J&&WXEnvironment.platform.toLowerCase(),K=q&&window.navigator.userAgent.toLowerCase(),W=K&&/msie|trident/.test(K),Q=K&&K.indexOf("msie 9.0")>0,X=K&&K.indexOf("edge/")>0,Y=(K&&K.indexOf("android"),K&&/iphone|ipad|ipod|ios/.test(K)||"ios"===G),Z=(K&&/chrome\/\d+/.test(K),K&&/phantomjs/.test(K),K&&K.match(/firefox\/(\d+)/)),ee={}.watch,te=!1;if(q)try{var ne={};Object.defineProperty(ne,"passive",{get:function(){te=!0}}),window.addEventListener("test-passive",null,ne)}catch(e){}var ie=function(){return void 0===z&&(z=!q&&!J&&void 0!==e&&(e.process&&"server"===e.process.env.VUE_ENV)),z},re=q&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function oe(e){return"function"==typeof e&&/native code/.test(e.toString())}var ae,se="undefined"!=typeof Symbol&&oe(Symbol)&&"undefined"!=typeof Reflect&&oe(Reflect.ownKeys);ae="undefined"!=typeof Set&&oe(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var le=$,ce=0,ue=function(){this.id=ce++,this.subs=[]};ue.prototype.addSub=function(e){this.subs.push(e)},ue.prototype.removeSub=function(e){y(this.subs,e)},ue.prototype.depend=function(){ue.target&&ue.target.addDep(this)},ue.prototype.notify=function(){var e=this.subs.slice();for(var t=0,n=e.length;t<n;t++)e[t].update()},ue.target=null;var de=[];function pe(e){de.push(e),ue.target=e}function fe(){de.pop(),ue.target=de[de.length-1]}var he=function(e,t,n,i,r,o,a,s){this.tag=e,this.data=t,this.children=n,this.text=i,this.elm=r,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},ve={child:{configurable:!0}};ve.child.get=function(){return this.componentInstance},Object.defineProperties(he.prototype,ve);var me=function(e){void 0===e&&(e="");var t=new he;return t.text=e,t.isComment=!0,t};function ge(e){return new he(void 0,void 0,void 0,String(e))}function ye(e){var t=new he(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var be=Array.prototype,_e=Object.create(be);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=be[e];U(_e,e,(function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];var r,o=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&a.observeArray(r),a.dep.notify(),o}))}));var we=Object.getOwnPropertyNames(_e),xe=!0;function Se(e){xe=e}var Ce=function(e){this.value=e,this.dep=new ue,this.vmCount=0,U(e,"__ob__",this),Array.isArray(e)?(V?function(e,t){e.__proto__=t}(e,_e):function(e,t,n){for(var i=0,r=n.length;i<r;i++){var o=n[i];U(e,o,t[o])}}(e,_e,we),this.observeArray(e)):this.walk(e)};function ke(e,t){var n;if(l(e)&&!(e instanceof he))return _(e,"__ob__")&&e.__ob__ instanceof Ce?n=e.__ob__:xe&&!ie()&&(Array.isArray(e)||u(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Ce(e)),t&&n&&n.vmCount++,n}function Oe(e,t,n,i,r){var o=new ue,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get,l=a&&a.set;s&&!l||2!==arguments.length||(n=e[t]);var c=!r&&ke(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return ue.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(t)&&Le(t))),t},set:function(t){var i=s?s.call(e):n;t===i||t!=t&&i!=i||s&&!l||(l?l.call(e,t):n=t,c=!r&&ke(t),o.notify())}})}}function Ae(e,t,n){if(Array.isArray(e)&&p(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var i=e.__ob__;return e._isVue||i&&i.vmCount?n:i?(Oe(i.value,t,n),i.dep.notify(),n):(e[t]=n,n)}function Te(e,t){if(Array.isArray(e)&&p(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount||_(e,t)&&(delete e[t],n&&n.dep.notify())}}function Le(e){for(var t=void 0,n=0,i=e.length;n<i;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Le(t)}Ce.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Oe(e,t[n])},Ce.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)ke(e[t])};var Ee=F.optionMergeStrategies;function $e(e,t){if(!t)return e;for(var n,i,r,o=se?Reflect.ownKeys(t):Object.keys(t),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(i=e[n],r=t[n],_(e,n)?i!==r&&u(i)&&u(r)&&$e(i,r):Ae(e,n,r));return e}function Me(e,t,n){return n?function(){var i="function"==typeof t?t.call(n,n):t,r="function"==typeof e?e.call(n,n):e;return i?$e(i,r):r}:t?e?function(){return $e("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function je(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function De(e,t,n,i){var r=Object.create(e||null);return t?L(r,t):r}Ee.data=function(e,t,n){return n?Me(e,t,n):t&&"function"!=typeof t?e:Me(e,t)},N.forEach((function(e){Ee[e]=je})),R.forEach((function(e){Ee[e+"s"]=De})),Ee.watch=function(e,t,n,i){if(e===ee&&(e=void 0),t===ee&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var r={};for(var o in L(r,e),t){var a=r[o],s=t[o];a&&!Array.isArray(a)&&(a=[a]),r[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return r},Ee.props=Ee.methods=Ee.inject=Ee.computed=function(e,t,n,i){if(!e)return t;var r=Object.create(null);return L(r,e),t&&L(r,t),r},Ee.provide=Me;var Ie=function(e,t){return void 0===t?e:t};function Pe(e,t,n){if("function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var i,r,o={};if(Array.isArray(n))for(i=n.length;i--;)"string"==typeof(r=n[i])&&(o[S(r)]={type:null});else if(u(n))for(var a in n)r=n[a],o[S(a)]=u(r)?r:{type:r};else 0;e.props=o}}(t),function(e,t){var n=e.inject;if(n){var i=e.inject={};if(Array.isArray(n))for(var r=0;r<n.length;r++)i[n[r]]={from:n[r]};else if(u(n))for(var o in n){var a=n[o];i[o]=u(a)?L({from:o},a):{from:a}}else 0}}(t),function(e){var t=e.directives;if(t)for(var n in t){var i=t[n];"function"==typeof i&&(t[n]={bind:i,update:i})}}(t),!t._base&&(t.extends&&(e=Pe(e,t.extends,n)),t.mixins))for(var i=0,r=t.mixins.length;i<r;i++)e=Pe(e,t.mixins[i],n);var o,a={};for(o in e)s(o);for(o in t)_(e,o)||s(o);function s(i){var r=Ee[i]||Ie;a[i]=r(e[i],t[i],n,i)}return a}function Re(e,t,n,i){if("string"==typeof n){var r=e[t];if(_(r,n))return r[n];var o=S(n);if(_(r,o))return r[o];var a=C(o);return _(r,a)?r[a]:r[n]||r[o]||r[a]}}function Ne(e,t,n,i){var r=t[e],o=!_(n,e),a=n[e],s=Ue(Boolean,r.type);if(s>-1)if(o&&!_(r,"default"))a=!1;else if(""===a||a===O(e)){var l=Ue(String,r.type);(l<0||s<l)&&(a=!0)}if(void 0===a){a=function(e,t,n){if(!_(t,"default"))return;var i=t.default;0;if(e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n])return e._props[n];return"function"==typeof i&&"Function"!==Fe(t.type)?i.call(e):i}(i,r,e);var c=xe;Se(!0),ke(a),Se(c)}return a}function Fe(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function He(e,t){return Fe(e)===Fe(t)}function Ue(e,t){if(!Array.isArray(t))return He(t,e)?0:-1;for(var n=0,i=t.length;n<i;n++)if(He(t[n],e))return n;return-1}function Be(e,t,n){pe();try{if(t)for(var i=t;i=i.$parent;){var r=i.$options.errorCaptured;if(r)for(var o=0;o<r.length;o++)try{if(!1===r[o].call(i,e,t,n))return}catch(e){Ve(e,i,"errorCaptured hook")}}Ve(e,t,n)}finally{fe()}}function ze(e,t,n,i,r){var o;try{(o=n?e.apply(t,n):e.call(t))&&!o._isVue&&f(o)&&!o._handled&&(o.catch((function(e){return Be(e,i,r+" (Promise/async)")})),o._handled=!0)}catch(e){Be(e,i,r)}return o}function Ve(e,t,n){if(F.errorHandler)try{return F.errorHandler.call(null,e,t,n)}catch(t){t!==e&&qe(t,null,"config.errorHandler")}qe(e,t,n)}function qe(e,t,n){if(!q&&!J||"undefined"==typeof console)throw e;console.error(e)}var Je,Ge=!1,Ke=[],We=!1;function Qe(){We=!1;var e=Ke.slice(0);Ke.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&oe(Promise)){var Xe=Promise.resolve();Je=function(){Xe.then(Qe),Y&&setTimeout($)},Ge=!0}else if(W||"undefined"==typeof MutationObserver||!oe(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Je=void 0!==n&&oe(n)?function(){n(Qe)}:function(){setTimeout(Qe,0)};else{var Ye=1,Ze=new MutationObserver(Qe),et=document.createTextNode(String(Ye));Ze.observe(et,{characterData:!0}),Je=function(){Ye=(Ye+1)%2,et.data=String(Ye)},Ge=!0}function tt(e,t){var n;if(Ke.push((function(){if(e)try{e.call(t)}catch(e){Be(e,t,"nextTick")}else n&&n(t)})),We||(We=!0,Je()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var nt=new ae;function it(e){!function e(t,n){var i,r,o=Array.isArray(t);if(!o&&!l(t)||Object.isFrozen(t)||t instanceof he)return;if(t.__ob__){var a=t.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(i=t.length;i--;)e(t[i],n);else for(r=Object.keys(t),i=r.length;i--;)e(t[r[i]],n)}(e,nt),nt.clear()}var rt=w((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),i="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=i?e.slice(1):e,once:n,capture:i,passive:t}}));function ot(e,t){function n(){var e=arguments,i=n.fns;if(!Array.isArray(i))return ze(i,null,arguments,t,"v-on handler");for(var r=i.slice(),o=0;o<r.length;o++)ze(r[o],null,e,t,"v-on handler")}return n.fns=e,n}function at(e,t,n,i,o,s){var l,c,u,d;for(l in e)c=e[l],u=t[l],d=rt(l),r(c)||(r(u)?(r(c.fns)&&(c=e[l]=ot(c,s)),a(d.once)&&(c=e[l]=o(d.name,c,d.capture)),n(d.name,c,d.capture,d.passive,d.params)):c!==u&&(u.fns=c,e[l]=u));for(l in t)r(e[l])&&i((d=rt(l)).name,t[l],d.capture)}function st(e,t,n){var i;e instanceof he&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function l(){n.apply(this,arguments),y(i.fns,l)}r(s)?i=ot([l]):o(s.fns)&&a(s.merged)?(i=s).fns.push(l):i=ot([s,l]),i.merged=!0,e[t]=i}function lt(e,t,n,i,r){if(o(t)){if(_(t,n))return e[n]=t[n],r||delete t[n],!0;if(_(t,i))return e[n]=t[i],r||delete t[i],!0}return!1}function ct(e){return s(e)?[ge(e)]:Array.isArray(e)?function e(t,n){var i,l,c,u,d=[];for(i=0;i<t.length;i++)r(l=t[i])||"boolean"==typeof l||(c=d.length-1,u=d[c],Array.isArray(l)?l.length>0&&(ut((l=e(l,(n||"")+"_"+i))[0])&&ut(u)&&(d[c]=ge(u.text+l[0].text),l.shift()),d.push.apply(d,l)):s(l)?ut(u)?d[c]=ge(u.text+l):""!==l&&d.push(ge(l)):ut(l)&&ut(u)?d[c]=ge(u.text+l.text):(a(t._isVList)&&o(l.tag)&&r(l.key)&&o(n)&&(l.key="__vlist"+n+"_"+i+"__"),d.push(l)));return d}(e):void 0}function ut(e){return o(e)&&o(e.text)&&!1===e.isComment}function dt(e,t){if(e){for(var n=Object.create(null),i=se?Reflect.ownKeys(e):Object.keys(e),r=0;r<i.length;r++){var o=i[r];if("__ob__"!==o){for(var a=e[o].from,s=t;s;){if(s._provided&&_(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in e[o]){var l=e[o].default;n[o]="function"==typeof l?l.call(t):l}else 0}}return n}}function pt(e,t){if(!e||!e.length)return{};for(var n={},i=0,r=e.length;i<r;i++){var o=e[i],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==t&&o.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,l=n[s]||(n[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in n)n[c].every(ft)&&delete n[c];return n}function ft(e){return e.isComment&&!e.asyncFactory||" "===e.text}function ht(e,t,n){var r,o=Object.keys(t).length>0,a=e?!!e.$stable:!o,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&n&&n!==i&&s===n.$key&&!o&&!n.$hasNormal)return n;for(var l in r={},e)e[l]&&"$"!==l[0]&&(r[l]=vt(t,l,e[l]))}else r={};for(var c in t)c in r||(r[c]=mt(t,c));return e&&Object.isExtensible(e)&&(e._normalized=r),U(r,"$stable",a),U(r,"$key",s),U(r,"$hasNormal",o),r}function vt(e,t,n){var i=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:ct(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:i,enumerable:!0,configurable:!0}),i}function mt(e,t){return function(){return e[t]}}function gt(e,t){var n,i,r,a,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),i=0,r=e.length;i<r;i++)n[i]=t(e[i],i);else if("number"==typeof e)for(n=new Array(e),i=0;i<e;i++)n[i]=t(i+1,i);else if(l(e))if(se&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),u=c.next();!u.done;)n.push(t(u.value,n.length)),u=c.next()}else for(a=Object.keys(e),n=new Array(a.length),i=0,r=a.length;i<r;i++)s=a[i],n[i]=t(e[s],s,i);return o(n)||(n=[]),n._isVList=!0,n}function yt(e,t,n,i){var r,o=this.$scopedSlots[e];o?(n=n||{},i&&(n=L(L({},i),n)),r=o(n)||t):r=this.$slots[e]||t;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},r):r}function bt(e){return Re(this.$options,"filters",e)||j}function _t(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function wt(e,t,n,i,r){var o=F.keyCodes[t]||n;return r&&i&&!F.keyCodes[t]?_t(r,i):o?_t(o,e):i?O(i)!==t:void 0}function xt(e,t,n,i,r){if(n)if(l(n)){var o;Array.isArray(n)&&(n=E(n));var a=function(a){if("class"===a||"style"===a||g(a))o=e;else{var s=e.attrs&&e.attrs.type;o=i||F.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=S(a),c=O(a);l in o||c in o||(o[a]=n[a],r&&((e.on||(e.on={}))["update:"+a]=function(e){n[a]=e}))};for(var s in n)a(s)}else;return e}function St(e,t){var n=this._staticTrees||(this._staticTrees=[]),i=n[e];return i&&!t||kt(i=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),i}function Ct(e,t,n){return kt(e,"__once__"+t+(n?"_"+n:""),!0),e}function kt(e,t,n){if(Array.isArray(e))for(var i=0;i<e.length;i++)e[i]&&"string"!=typeof e[i]&&Ot(e[i],t+"_"+i,n);else Ot(e,t,n)}function Ot(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function At(e,t){if(t)if(u(t)){var n=e.on=e.on?L({},e.on):{};for(var i in t){var r=n[i],o=t[i];n[i]=r?[].concat(r,o):o}}else;return e}function Tt(e,t,n,i){t=t||{$stable:!n};for(var r=0;r<e.length;r++){var o=e[r];Array.isArray(o)?Tt(o,t,n):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return i&&(t.$key=i),t}function Lt(e,t){for(var n=0;n<t.length;n+=2){var i=t[n];"string"==typeof i&&i&&(e[t[n]]=t[n+1])}return e}function Et(e,t){return"string"==typeof e?t+e:e}function $t(e){e._o=Ct,e._n=v,e._s=h,e._l=gt,e._t=yt,e._q=D,e._i=I,e._m=St,e._f=bt,e._k=wt,e._b=xt,e._v=ge,e._e=me,e._u=Tt,e._g=At,e._d=Lt,e._p=Et}function Mt(e,t,n,r,o){var s,l=this,c=o.options;_(r,"_uid")?(s=Object.create(r))._original=r:(s=r,r=r._original);var u=a(c._compiled),d=!u;this.data=e,this.props=t,this.children=n,this.parent=r,this.listeners=e.on||i,this.injections=dt(c.inject,r),this.slots=function(){return l.$slots||ht(e.scopedSlots,l.$slots=pt(n,r)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ht(e.scopedSlots,this.slots())}}),u&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=ht(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,i){var o=Ft(s,e,t,n,i,d);return o&&!Array.isArray(o)&&(o.fnScopeId=c._scopeId,o.fnContext=r),o}:this._c=function(e,t,n,i){return Ft(s,e,t,n,i,d)}}function jt(e,t,n,i,r){var o=ye(e);return o.fnContext=n,o.fnOptions=i,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function Dt(e,t){for(var n in t)e[S(n)]=t[n]}$t(Mt.prototype);var It={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;It.prepatch(n,n)}else{(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},i=e.data.inlineTemplate;o(i)&&(n.render=i.render,n.staticRenderFns=i.staticRenderFns);return new e.componentOptions.Ctor(n)}(e,Wt)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,r,o){0;var a=r.data.scopedSlots,s=e.$scopedSlots,l=!!(a&&!a.$stable||s!==i&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key),c=!!(o||e.$options._renderChildren||l);e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r);if(e.$options._renderChildren=o,e.$attrs=r.data.attrs||i,e.$listeners=n||i,t&&e.$options.props){Se(!1);for(var u=e._props,d=e.$options._propKeys||[],p=0;p<d.length;p++){var f=d[p],h=e.$options.props;u[f]=Ne(f,h,t,e)}Se(!0),e.$options.propsData=t}n=n||i;var v=e.$options._parentListeners;e.$options._parentListeners=n,Kt(e,n,v),c&&(e.$slots=pt(o,r.context),e.$forceUpdate());0}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,i=e.componentInstance;i._isMounted||(i._isMounted=!0,Zt(i,"mounted")),e.data.keepAlive&&(n._isMounted?((t=i)._inactive=!1,tn.push(t)):Yt(i,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(n&&(t._directInactive=!0,Xt(t)))return;if(!t._inactive){t._inactive=!0;for(var i=0;i<t.$children.length;i++)e(t.$children[i]);Zt(t,"deactivated")}}(t,!0):t.$destroy())}},Pt=Object.keys(It);function Rt(e,t,n,s,c){if(!r(e)){var u=n.$options._base;if(l(e)&&(e=u.extend(e)),"function"==typeof e){var d;if(r(e.cid)&&void 0===(e=function(e,t){if(a(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var n=Ut;n&&o(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n);if(a(e.loading)&&o(e.loadingComp))return e.loadingComp;if(n&&!o(e.owners)){var i=e.owners=[n],s=!0,c=null,u=null;n.$on("hook:destroyed",(function(){return y(i,n)}));var d=function(e){for(var t=0,n=i.length;t<n;t++)i[t].$forceUpdate();e&&(i.length=0,null!==c&&(clearTimeout(c),c=null),null!==u&&(clearTimeout(u),u=null))},p=P((function(n){e.resolved=Bt(n,t),s?i.length=0:d(!0)})),h=P((function(t){o(e.errorComp)&&(e.error=!0,d(!0))})),v=e(p,h);return l(v)&&(f(v)?r(e.resolved)&&v.then(p,h):f(v.component)&&(v.component.then(p,h),o(v.error)&&(e.errorComp=Bt(v.error,t)),o(v.loading)&&(e.loadingComp=Bt(v.loading,t),0===v.delay?e.loading=!0:c=setTimeout((function(){c=null,r(e.resolved)&&r(e.error)&&(e.loading=!0,d(!1))}),v.delay||200)),o(v.timeout)&&(u=setTimeout((function(){u=null,r(e.resolved)&&h(null)}),v.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(d=e,u)))return function(e,t,n,i,r){var o=me();return o.asyncFactory=e,o.asyncMeta={data:t,context:n,children:i,tag:r},o}(d,t,n,s,c);t=t||{},xn(e),o(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",i=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var r=t.on||(t.on={}),a=r[i],s=t.model.callback;o(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(r[i]=[s].concat(a)):r[i]=s}(e.options,t);var p=function(e,t,n){var i=t.options.props;if(!r(i)){var a={},s=e.attrs,l=e.props;if(o(s)||o(l))for(var c in i){var u=O(c);lt(a,l,c,u,!0)||lt(a,s,c,u,!1)}return a}}(t,e);if(a(e.options.functional))return function(e,t,n,r,a){var s=e.options,l={},c=s.props;if(o(c))for(var u in c)l[u]=Ne(u,c,t||i);else o(n.attrs)&&Dt(l,n.attrs),o(n.props)&&Dt(l,n.props);var d=new Mt(n,l,a,r,e),p=s.render.call(null,d._c,d);if(p instanceof he)return jt(p,n,d.parent,s,d);if(Array.isArray(p)){for(var f=ct(p)||[],h=new Array(f.length),v=0;v<f.length;v++)h[v]=jt(f[v],n,d.parent,s,d);return h}}(e,p,t,n,s);var h=t.on;if(t.on=t.nativeOn,a(e.options.abstract)){var v=t.slot;t={},v&&(t.slot=v)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<Pt.length;n++){var i=Pt[n],r=t[i],o=It[i];r===o||r&&r._merged||(t[i]=r?Nt(o,r):o)}}(t);var m=e.options.name||c;return new he("vue-component-"+e.cid+(m?"-"+m:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:p,listeners:h,tag:c,children:s},d)}}}function Nt(e,t){var n=function(n,i){e(n,i),t(n,i)};return n._merged=!0,n}function Ft(e,t,n,i,c,u){return(Array.isArray(n)||s(n))&&(c=i,i=n,n=void 0),a(u)&&(c=2),function(e,t,n,i,s){if(o(n)&&o(n.__ob__))return me();o(n)&&o(n.is)&&(t=n.is);if(!t)return me();0;Array.isArray(i)&&"function"==typeof i[0]&&((n=n||{}).scopedSlots={default:i[0]},i.length=0);2===s?i=ct(i):1===s&&(i=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(i));var c,u;if("string"==typeof t){var d;u=e.$vnode&&e.$vnode.ns||F.getTagNamespace(t),c=F.isReservedTag(t)?new he(F.parsePlatformTagName(t),n,i,void 0,void 0,e):n&&n.pre||!o(d=Re(e.$options,"components",t))?new he(t,n,i,void 0,void 0,e):Rt(d,n,e,i,t)}else c=Rt(t,n,e,i);return Array.isArray(c)?c:o(c)?(o(u)&&function e(t,n,i){t.ns=n,"foreignObject"===t.tag&&(n=void 0,i=!0);if(o(t.children))for(var s=0,l=t.children.length;s<l;s++){var c=t.children[s];o(c.tag)&&(r(c.ns)||a(i)&&"svg"!==c.tag)&&e(c,n,i)}}(c,u),o(n)&&function(e){l(e.style)&&it(e.style);l(e.class)&&it(e.class)}(n),c):me()}(e,t,n,i,c)}var Ht,Ut=null;function Bt(e,t){return(e.__esModule||se&&"Module"===e[Symbol.toStringTag])&&(e=e.default),l(e)?t.extend(e):e}function zt(e){return e.isComment&&e.asyncFactory}function Vt(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||zt(n)))return n}}function qt(e,t){Ht.$on(e,t)}function Jt(e,t){Ht.$off(e,t)}function Gt(e,t){var n=Ht;return function i(){var r=t.apply(null,arguments);null!==r&&n.$off(e,i)}}function Kt(e,t,n){Ht=e,at(t,n||{},qt,Jt,Gt,e),Ht=void 0}var Wt=null;function Qt(e){var t=Wt;return Wt=e,function(){Wt=t}}function Xt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Yt(e,t){if(t){if(e._directInactive=!1,Xt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Yt(e.$children[n]);Zt(e,"activated")}}function Zt(e,t){pe();var n=e.$options[t],i=t+" hook";if(n)for(var r=0,o=n.length;r<o;r++)ze(n[r],e,null,e,i);e._hasHookEvent&&e.$emit("hook:"+t),fe()}var en=[],tn=[],nn={},rn=!1,on=!1,an=0;var sn=0,ln=Date.now;if(q&&!W){var cn=window.performance;cn&&"function"==typeof cn.now&&ln()>document.createEvent("Event").timeStamp&&(ln=function(){return cn.now()})}function un(){var e,t;for(sn=ln(),on=!0,en.sort((function(e,t){return e.id-t.id})),an=0;an<en.length;an++)(e=en[an]).before&&e.before(),t=e.id,nn[t]=null,e.run();var n=tn.slice(),i=en.slice();an=en.length=tn.length=0,nn={},rn=on=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Yt(e[t],!0)}(n),function(e){var t=e.length;for(;t--;){var n=e[t],i=n.vm;i._watcher===n&&i._isMounted&&!i._isDestroyed&&Zt(i,"updated")}}(i),re&&F.devtools&&re.emit("flush")}var dn=0,pn=function(e,t,n,i,r){this.vm=e,r&&(e._watcher=this),e._watchers.push(this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.before=i.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++dn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ae,this.newDepIds=new ae,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(e){if(!B.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=$)),this.value=this.lazy?void 0:this.get()};pn.prototype.get=function(){var e;pe(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;Be(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&it(e),fe(),this.cleanupDeps()}return e},pn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},pn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},pn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==nn[t]){if(nn[t]=!0,on){for(var n=en.length-1;n>an&&en[n].id>e.id;)n--;en.splice(n+1,0,e)}else en.push(e);rn||(rn=!0,tt(un))}}(this)},pn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||l(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){Be(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},pn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},pn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var fn={enumerable:!0,configurable:!0,get:$,set:$};function hn(e,t,n){fn.get=function(){return this[t][n]},fn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,fn)}function vn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},i=e._props={},r=e.$options._propKeys=[];e.$parent&&Se(!1);var o=function(o){r.push(o);var a=Ne(o,t,n,e);Oe(i,o,a),o in e||hn(e,"_props",o)};for(var a in t)o(a);Se(!0)}(e,t.props),t.methods&&function(e,t){e.$options.props;for(var n in t)e[n]="function"!=typeof t[n]?$:A(t[n],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;u(t=e._data="function"==typeof t?function(e,t){pe();try{return e.call(t,t)}catch(e){return Be(e,t,"data()"),{}}finally{fe()}}(t,e):t||{})||(t={});var n=Object.keys(t),i=e.$options.props,r=(e.$options.methods,n.length);for(;r--;){var o=n[r];0,i&&_(i,o)||(a=void 0,36!==(a=(o+"").charCodeAt(0))&&95!==a&&hn(e,"_data",o))}var a;ke(t,!0)}(e):ke(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),i=ie();for(var r in t){var o=t[r],a="function"==typeof o?o:o.get;0,i||(n[r]=new pn(e,a||$,$,mn)),r in e||gn(e,r,o)}}(e,t.computed),t.watch&&t.watch!==ee&&function(e,t){for(var n in t){var i=t[n];if(Array.isArray(i))for(var r=0;r<i.length;r++)_n(e,n,i[r]);else _n(e,n,i)}}(e,t.watch)}var mn={lazy:!0};function gn(e,t,n){var i=!ie();"function"==typeof n?(fn.get=i?yn(t):bn(n),fn.set=$):(fn.get=n.get?i&&!1!==n.cache?yn(t):bn(n.get):$,fn.set=n.set||$),Object.defineProperty(e,t,fn)}function yn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ue.target&&t.depend(),t.value}}function bn(e){return function(){return e.call(this,this)}}function _n(e,t,n,i){return u(n)&&(i=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,i)}var wn=0;function xn(e){var t=e.options;if(e.super){var n=xn(e.super);if(n!==e.superOptions){e.superOptions=n;var i=function(e){var t,n=e.options,i=e.sealedOptions;for(var r in n)n[r]!==i[r]&&(t||(t={}),t[r]=n[r]);return t}(e);i&&L(e.extendOptions,i),(t=e.options=Pe(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Sn(e){this._init(e)}function Cn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,i=n.cid,r=e._Ctor||(e._Ctor={});if(r[i])return r[i];var o=e.name||n.options.name;var a=function(e){this._init(e)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=t++,a.options=Pe(n.options,e),a.super=n,a.options.props&&function(e){var t=e.options.props;for(var n in t)hn(e.prototype,"_props",n)}(a),a.options.computed&&function(e){var t=e.options.computed;for(var n in t)gn(e.prototype,n,t[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,R.forEach((function(e){a[e]=n[e]})),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=L({},a.options),r[i]=a,a}}function kn(e){return e&&(e.Ctor.options.name||e.tag)}function On(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!d(e)&&e.test(t)}function An(e,t){var n=e.cache,i=e.keys,r=e._vnode;for(var o in n){var a=n[o];if(a){var s=kn(a.componentOptions);s&&!t(s)&&Tn(n,o,i,r)}}}function Tn(e,t,n,i){var r=e[t];!r||i&&r.tag===i.tag||r.componentInstance.$destroy(),e[t]=null,y(n,t)}!function(e){e.prototype._init=function(e){var t=this;t._uid=wn++,t._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),i=t._parentVnode;n.parent=t.parent,n._parentVnode=i;var r=i.componentOptions;n.propsData=r.propsData,n._parentListeners=r.listeners,n._renderChildren=r.children,n._componentTag=r.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=Pe(xn(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Kt(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=pt(t._renderChildren,r),e.$scopedSlots=i,e._c=function(t,n,i,r){return Ft(e,t,n,i,r,!1)},e.$createElement=function(t,n,i,r){return Ft(e,t,n,i,r,!0)};var o=n&&n.data;Oe(e,"$attrs",o&&o.attrs||i,null,!0),Oe(e,"$listeners",t._parentListeners||i,null,!0)}(t),Zt(t,"beforeCreate"),function(e){var t=dt(e.$options.inject,e);t&&(Se(!1),Object.keys(t).forEach((function(n){Oe(e,n,t[n])})),Se(!0))}(t),vn(t),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(t),Zt(t,"created"),t.$options.el&&t.$mount(t.$options.el)}}(Sn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ae,e.prototype.$delete=Te,e.prototype.$watch=function(e,t,n){if(u(t))return _n(this,e,t,n);(n=n||{}).user=!0;var i=new pn(this,e,t,n);if(n.immediate)try{t.call(this,i.value)}catch(e){Be(e,this,'callback for immediate watcher "'+i.expression+'"')}return function(){i.teardown()}}}(Sn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var i=this;if(Array.isArray(e))for(var r=0,o=e.length;r<o;r++)i.$on(e[r],n);else(i._events[e]||(i._events[e]=[])).push(n),t.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,t){var n=this;function i(){n.$off(e,i),t.apply(n,arguments)}return i.fn=t,n.$on(e,i),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var i=0,r=e.length;i<r;i++)n.$off(e[i],t);return n}var o,a=n._events[e];if(!a)return n;if(!t)return n._events[e]=null,n;for(var s=a.length;s--;)if((o=a[s])===t||o.fn===t){a.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?T(n):n;for(var i=T(arguments,1),r='event handler for "'+e+'"',o=0,a=n.length;o<a;o++)ze(n[o],t,i,t,r)}return t}}(Sn),function(e){e.prototype._update=function(e,t){var n=this,i=n.$el,r=n._vnode,o=Qt(n);n._vnode=e,n.$el=r?n.__patch__(r,e):n.__patch__(n.$el,e,t,!1),o(),i&&(i.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Zt(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||y(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Zt(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Sn),function(e){$t(e.prototype),e.prototype.$nextTick=function(e){return tt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,i=n.render,r=n._parentVnode;r&&(t.$scopedSlots=ht(r.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=r;try{Ut=t,e=i.call(t._renderProxy,t.$createElement)}catch(n){Be(n,t,"render"),e=t._vnode}finally{Ut=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof he||(e=me()),e.parent=r,e}}(Sn);var Ln=[String,RegExp,Array],En={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ln,exclude:Ln,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Tn(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){An(e,(function(e){return On(t,e)}))})),this.$watch("exclude",(function(t){An(e,(function(e){return!On(t,e)}))}))},render:function(){var e=this.$slots.default,t=Vt(e),n=t&&t.componentOptions;if(n){var i=kn(n),r=this.include,o=this.exclude;if(r&&(!i||!On(r,i))||o&&i&&On(o,i))return t;var a=this.cache,s=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[l]?(t.componentInstance=a[l].componentInstance,y(s,l),s.push(l)):(a[l]=t,s.push(l),this.max&&s.length>parseInt(this.max)&&Tn(a,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return F}};Object.defineProperty(e,"config",t),e.util={warn:le,extend:L,mergeOptions:Pe,defineReactive:Oe},e.set=Ae,e.delete=Te,e.nextTick=tt,e.observable=function(e){return ke(e),e},e.options=Object.create(null),R.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,L(e.options.components,En),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=T(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Pe(this.options,e),this}}(e),Cn(e),function(e){R.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&u(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(Sn),Object.defineProperty(Sn.prototype,"$isServer",{get:ie}),Object.defineProperty(Sn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Sn,"FunctionalRenderContext",{value:Mt}),Sn.version="2.6.11";var $n=m("style,class"),Mn=m("input,textarea,option,select,progress"),jn=m("contenteditable,draggable,spellcheck"),Dn=m("events,caret,typing,plaintext-only"),In=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Pn="http://www.w3.org/1999/xlink",Rn=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Nn=function(e){return Rn(e)?e.slice(6,e.length):""},Fn=function(e){return null==e||!1===e};function Hn(e){for(var t=e.data,n=e,i=e;o(i.componentInstance);)(i=i.componentInstance._vnode)&&i.data&&(t=Un(i.data,t));for(;o(n=n.parent);)n&&n.data&&(t=Un(t,n.data));return function(e,t){if(o(e)||o(t))return Bn(e,zn(t));return""}(t.staticClass,t.class)}function Un(e,t){return{staticClass:Bn(e.staticClass,t.staticClass),class:o(e.class)?[e.class,t.class]:t.class}}function Bn(e,t){return e?t?e+" "+t:e:t||""}function zn(e){return Array.isArray(e)?function(e){for(var t,n="",i=0,r=e.length;i<r;i++)o(t=zn(e[i]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):l(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var Vn={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},qn=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Jn=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Gn=function(e){return qn(e)||Jn(e)};var Kn=Object.create(null);var Wn=m("text,number,password,search,email,tel,url");var Qn=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(Vn[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Xn={create:function(e,t){Yn(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Yn(e,!0),Yn(t))},destroy:function(e){Yn(e,!0)}};function Yn(e,t){var n=e.data.ref;if(o(n)){var i=e.context,r=e.componentInstance||e.elm,a=i.$refs;t?Array.isArray(a[n])?y(a[n],r):a[n]===r&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])?a[n].indexOf(r)<0&&a[n].push(r):a[n]=[r]:a[n]=r}}var Zn=new he("",{},[]),ei=["create","activate","update","remove","destroy"];function ti(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&o(e.data)===o(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,i=o(n=e.data)&&o(n=n.attrs)&&n.type,r=o(n=t.data)&&o(n=n.attrs)&&n.type;return i===r||Wn(i)&&Wn(r)}(e,t)||a(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&r(t.asyncFactory.error))}function ni(e,t,n){var i,r,a={};for(i=t;i<=n;++i)o(r=e[i].key)&&(a[r]=i);return a}var ii={create:ri,update:ri,destroy:function(e){ri(e,Zn)}};function ri(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,i,r,o=e===Zn,a=t===Zn,s=ai(e.data.directives,e.context),l=ai(t.data.directives,t.context),c=[],u=[];for(n in l)i=s[n],r=l[n],i?(r.oldValue=i.value,r.oldArg=i.arg,li(r,"update",t,e),r.def&&r.def.componentUpdated&&u.push(r)):(li(r,"bind",t,e),r.def&&r.def.inserted&&c.push(r));if(c.length){var d=function(){for(var n=0;n<c.length;n++)li(c[n],"inserted",t,e)};o?st(t,"insert",d):d()}u.length&&st(t,"postpatch",(function(){for(var n=0;n<u.length;n++)li(u[n],"componentUpdated",t,e)}));if(!o)for(n in s)l[n]||li(s[n],"unbind",e,e,a)}(e,t)}var oi=Object.create(null);function ai(e,t){var n,i,r=Object.create(null);if(!e)return r;for(n=0;n<e.length;n++)(i=e[n]).modifiers||(i.modifiers=oi),r[si(i)]=i,i.def=Re(t.$options,"directives",i.name);return r}function si(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function li(e,t,n,i,r){var o=e.def&&e.def[t];if(o)try{o(n.elm,e,n,i,r)}catch(i){Be(i,n.context,"directive "+e.name+" "+t+" hook")}}var ci=[Xn,ii];function ui(e,t){var n=t.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||r(e.data.attrs)&&r(t.data.attrs))){var i,a,s=t.elm,l=e.data.attrs||{},c=t.data.attrs||{};for(i in o(c.__ob__)&&(c=t.data.attrs=L({},c)),c)a=c[i],l[i]!==a&&di(s,i,a);for(i in(W||X)&&c.value!==l.value&&di(s,"value",c.value),l)r(c[i])&&(Rn(i)?s.removeAttributeNS(Pn,Nn(i)):jn(i)||s.removeAttribute(i))}}function di(e,t,n){e.tagName.indexOf("-")>-1?pi(e,t,n):In(t)?Fn(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):jn(t)?e.setAttribute(t,function(e,t){return Fn(t)||"false"===t?"false":"contenteditable"===e&&Dn(t)?t:"true"}(t,n)):Rn(t)?Fn(n)?e.removeAttributeNS(Pn,Nn(t)):e.setAttributeNS(Pn,t,n):pi(e,t,n)}function pi(e,t,n){if(Fn(n))e.removeAttribute(t);else{if(W&&!Q&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var i=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",i)};e.addEventListener("input",i),e.__ieph=!0}e.setAttribute(t,n)}}var fi={create:ui,update:ui};function hi(e,t){var n=t.elm,i=t.data,a=e.data;if(!(r(i.staticClass)&&r(i.class)&&(r(a)||r(a.staticClass)&&r(a.class)))){var s=Hn(t),l=n._transitionClasses;o(l)&&(s=Bn(s,zn(l))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var vi,mi={create:hi,update:hi};function gi(e,t,n){var i=vi;return function r(){var o=t.apply(null,arguments);null!==o&&_i(e,r,n,i)}}var yi=Ge&&!(Z&&Number(Z[1])<=53);function bi(e,t,n,i){if(yi){var r=sn,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=r||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}vi.addEventListener(e,t,te?{capture:n,passive:i}:n)}function _i(e,t,n,i){(i||vi).removeEventListener(e,t._wrapper||t,n)}function wi(e,t){if(!r(e.data.on)||!r(t.data.on)){var n=t.data.on||{},i=e.data.on||{};vi=t.elm,function(e){if(o(e.__r)){var t=W?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}o(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),at(n,i,bi,_i,gi,t.context),vi=void 0}}var xi,Si={create:wi,update:wi};function Ci(e,t){if(!r(e.data.domProps)||!r(t.data.domProps)){var n,i,a=t.elm,s=e.data.domProps||{},l=t.data.domProps||{};for(n in o(l.__ob__)&&(l=t.data.domProps=L({},l)),s)n in l||(a[n]="");for(n in l){if(i=l[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),i===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=i;var c=r(i)?"":String(i);ki(a,c)&&(a.value=c)}else if("innerHTML"===n&&Jn(a.tagName)&&r(a.innerHTML)){(xi=xi||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var u=xi.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;u.firstChild;)a.appendChild(u.firstChild)}else if(i!==s[n])try{a[n]=i}catch(e){}}}}function ki(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,i=e._vModifiers;if(o(i)){if(i.number)return v(n)!==v(t);if(i.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Oi={create:Ci,update:Ci},Ai=w((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var i=e.split(n);i.length>1&&(t[i[0].trim()]=i[1].trim())}})),t}));function Ti(e){var t=Li(e.style);return e.staticStyle?L(e.staticStyle,t):t}function Li(e){return Array.isArray(e)?E(e):"string"==typeof e?Ai(e):e}var Ei,$i=/^--/,Mi=/\s*!important$/,ji=function(e,t,n){if($i.test(t))e.style.setProperty(t,n);else if(Mi.test(n))e.style.setProperty(O(t),n.replace(Mi,""),"important");else{var i=Ii(t);if(Array.isArray(n))for(var r=0,o=n.length;r<o;r++)e.style[i]=n[r];else e.style[i]=n}},Di=["Webkit","Moz","ms"],Ii=w((function(e){if(Ei=Ei||document.createElement("div").style,"filter"!==(e=S(e))&&e in Ei)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Di.length;n++){var i=Di[n]+t;if(i in Ei)return i}}));function Pi(e,t){var n=t.data,i=e.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var a,s,l=t.elm,c=i.staticStyle,u=i.normalizedStyle||i.style||{},d=c||u,p=Li(t.data.style)||{};t.data.normalizedStyle=o(p.__ob__)?L({},p):p;var f=function(e,t){var n,i={};if(t)for(var r=e;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(n=Ti(r.data))&&L(i,n);(n=Ti(e.data))&&L(i,n);for(var o=e;o=o.parent;)o.data&&(n=Ti(o.data))&&L(i,n);return i}(t,!0);for(s in d)r(f[s])&&ji(l,s,"");for(s in f)(a=f[s])!==d[s]&&ji(l,s,null==a?"":a)}}var Ri={create:Pi,update:Pi},Ni=/\s+/;function Fi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Ni).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Hi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Ni).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",i=" "+t+" ";n.indexOf(i)>=0;)n=n.replace(i," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Ui(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&L(t,Bi(e.name||"v")),L(t,e),t}return"string"==typeof e?Bi(e):void 0}}var Bi=w((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),zi=q&&!Q,Vi="transition",qi="transitionend",Ji="animation",Gi="animationend";zi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Vi="WebkitTransition",qi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ji="WebkitAnimation",Gi="webkitAnimationEnd"));var Ki=q?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Wi(e){Ki((function(){Ki(e)}))}function Qi(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Fi(e,t))}function Xi(e,t){e._transitionClasses&&y(e._transitionClasses,t),Hi(e,t)}function Yi(e,t,n){var i=er(e,t),r=i.type,o=i.timeout,a=i.propCount;if(!r)return n();var s="transition"===r?qi:Gi,l=0,c=function(){e.removeEventListener(s,u),n()},u=function(t){t.target===e&&++l>=a&&c()};setTimeout((function(){l<a&&c()}),o+1),e.addEventListener(s,u)}var Zi=/\b(transform|all)(,|$)/;function er(e,t){var n,i=window.getComputedStyle(e),r=(i[Vi+"Delay"]||"").split(", "),o=(i[Vi+"Duration"]||"").split(", "),a=tr(r,o),s=(i[Ji+"Delay"]||"").split(", "),l=(i[Ji+"Duration"]||"").split(", "),c=tr(s,l),u=0,d=0;return"transition"===t?a>0&&(n="transition",u=a,d=o.length):"animation"===t?c>0&&(n="animation",u=c,d=l.length):d=(n=(u=Math.max(a,c))>0?a>c?"transition":"animation":null)?"transition"===n?o.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:"transition"===n&&Zi.test(i[Vi+"Property"])}}function tr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return nr(t)+nr(e[n])})))}function nr(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function ir(e,t){var n=e.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Ui(e.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){for(var a=i.css,s=i.type,c=i.enterClass,u=i.enterToClass,d=i.enterActiveClass,p=i.appearClass,f=i.appearToClass,h=i.appearActiveClass,m=i.beforeEnter,g=i.enter,y=i.afterEnter,b=i.enterCancelled,_=i.beforeAppear,w=i.appear,x=i.afterAppear,S=i.appearCancelled,C=i.duration,k=Wt,O=Wt.$vnode;O&&O.parent;)k=O.context,O=O.parent;var A=!k._isMounted||!e.isRootInsert;if(!A||w||""===w){var T=A&&p?p:c,L=A&&h?h:d,E=A&&f?f:u,$=A&&_||m,M=A&&"function"==typeof w?w:g,j=A&&x||y,D=A&&S||b,I=v(l(C)?C.enter:C);0;var R=!1!==a&&!Q,N=ar(M),F=n._enterCb=P((function(){R&&(Xi(n,E),Xi(n,L)),F.cancelled?(R&&Xi(n,T),D&&D(n)):j&&j(n),n._enterCb=null}));e.data.show||st(e,"insert",(function(){var t=n.parentNode,i=t&&t._pending&&t._pending[e.key];i&&i.tag===e.tag&&i.elm._leaveCb&&i.elm._leaveCb(),M&&M(n,F)})),$&&$(n),R&&(Qi(n,T),Qi(n,L),Wi((function(){Xi(n,T),F.cancelled||(Qi(n,E),N||(or(I)?setTimeout(F,I):Yi(n,s,F)))}))),e.data.show&&(t&&t(),M&&M(n,F)),R||N||F()}}}function rr(e,t){var n=e.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Ui(e.data.transition);if(r(i)||1!==n.nodeType)return t();if(!o(n._leaveCb)){var a=i.css,s=i.type,c=i.leaveClass,u=i.leaveToClass,d=i.leaveActiveClass,p=i.beforeLeave,f=i.leave,h=i.afterLeave,m=i.leaveCancelled,g=i.delayLeave,y=i.duration,b=!1!==a&&!Q,_=ar(f),w=v(l(y)?y.leave:y);0;var x=n._leaveCb=P((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),b&&(Xi(n,u),Xi(n,d)),x.cancelled?(b&&Xi(n,c),m&&m(n)):(t(),h&&h(n)),n._leaveCb=null}));g?g(S):S()}function S(){x.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),p&&p(n),b&&(Qi(n,c),Qi(n,d),Wi((function(){Xi(n,c),x.cancelled||(Qi(n,u),_||(or(w)?setTimeout(x,w):Yi(n,s,x)))}))),f&&f(n,x),b||_||x())}}function or(e){return"number"==typeof e&&!isNaN(e)}function ar(e){if(r(e))return!1;var t=e.fns;return o(t)?ar(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function sr(e,t){!0!==t.data.show&&ir(t)}var lr=function(e){var t,n,i={},l=e.modules,c=e.nodeOps;for(t=0;t<ei.length;++t)for(i[ei[t]]=[],n=0;n<l.length;++n)o(l[n][ei[t]])&&i[ei[t]].push(l[n][ei[t]]);function u(e){var t=c.parentNode(e);o(t)&&c.removeChild(t,e)}function d(e,t,n,r,s,l,u){if(o(e.elm)&&o(l)&&(e=l[u]=ye(e)),e.isRootInsert=!s,!function(e,t,n,r){var s=e.data;if(o(s)){var l=o(e.componentInstance)&&s.keepAlive;if(o(s=s.hook)&&o(s=s.init)&&s(e,!1),o(e.componentInstance))return p(e,t),f(n,e.elm,r),a(l)&&function(e,t,n,r){var a,s=e;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(a=s.data)&&o(a=a.transition)){for(a=0;a<i.activate.length;++a)i.activate[a](Zn,s);t.push(s);break}f(n,e.elm,r)}(e,t,n,r),!0}}(e,t,n,r)){var d=e.data,v=e.children,m=e.tag;o(m)?(e.elm=e.ns?c.createElementNS(e.ns,m):c.createElement(m,e),y(e),h(e,v,t),o(d)&&g(e,t),f(n,e.elm,r)):a(e.isComment)?(e.elm=c.createComment(e.text),f(n,e.elm,r)):(e.elm=c.createTextNode(e.text),f(n,e.elm,r))}}function p(e,t){o(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,v(e)?(g(e,t),y(e)):(Yn(e),t.push(e))}function f(e,t,n){o(e)&&(o(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function h(e,t,n){if(Array.isArray(t)){0;for(var i=0;i<t.length;++i)d(t[i],n,e.elm,null,!0,t,i)}else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function v(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return o(e.tag)}function g(e,n){for(var r=0;r<i.create.length;++r)i.create[r](Zn,e);o(t=e.data.hook)&&(o(t.create)&&t.create(Zn,e),o(t.insert)&&n.push(e))}function y(e){var t;if(o(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)o(t=n.context)&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;o(t=Wt)&&t!==e.context&&t!==e.fnContext&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function b(e,t,n,i,r,o){for(;i<=r;++i)d(n[i],o,e,t,!1,n,i)}function _(e){var t,n,r=e.data;if(o(r))for(o(t=r.hook)&&o(t=t.destroy)&&t(e),t=0;t<i.destroy.length;++t)i.destroy[t](e);if(o(t=e.children))for(n=0;n<e.children.length;++n)_(e.children[n])}function w(e,t,n){for(;t<=n;++t){var i=e[t];o(i)&&(o(i.tag)?(x(i),_(i)):u(i.elm))}}function x(e,t){if(o(t)||o(e.data)){var n,r=i.remove.length+1;for(o(t)?t.listeners+=r:t=function(e,t){function n(){0==--n.listeners&&u(e)}return n.listeners=t,n}(e.elm,r),o(n=e.componentInstance)&&o(n=n._vnode)&&o(n.data)&&x(n,t),n=0;n<i.remove.length;++n)i.remove[n](e,t);o(n=e.data.hook)&&o(n=n.remove)?n(e,t):t()}else u(e.elm)}function S(e,t,n,i){for(var r=n;r<i;r++){var a=t[r];if(o(a)&&ti(e,a))return r}}function C(e,t,n,s,l,u){if(e!==t){o(t.elm)&&o(s)&&(t=s[l]=ye(t));var p=t.elm=e.elm;if(a(e.isAsyncPlaceholder))o(t.asyncFactory.resolved)?A(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(a(t.isStatic)&&a(e.isStatic)&&t.key===e.key&&(a(t.isCloned)||a(t.isOnce)))t.componentInstance=e.componentInstance;else{var f,h=t.data;o(h)&&o(f=h.hook)&&o(f=f.prepatch)&&f(e,t);var m=e.children,g=t.children;if(o(h)&&v(t)){for(f=0;f<i.update.length;++f)i.update[f](e,t);o(f=h.hook)&&o(f=f.update)&&f(e,t)}r(t.text)?o(m)&&o(g)?m!==g&&function(e,t,n,i,a){var s,l,u,p=0,f=0,h=t.length-1,v=t[0],m=t[h],g=n.length-1,y=n[0],_=n[g],x=!a;for(0;p<=h&&f<=g;)r(v)?v=t[++p]:r(m)?m=t[--h]:ti(v,y)?(C(v,y,i,n,f),v=t[++p],y=n[++f]):ti(m,_)?(C(m,_,i,n,g),m=t[--h],_=n[--g]):ti(v,_)?(C(v,_,i,n,g),x&&c.insertBefore(e,v.elm,c.nextSibling(m.elm)),v=t[++p],_=n[--g]):ti(m,y)?(C(m,y,i,n,f),x&&c.insertBefore(e,m.elm,v.elm),m=t[--h],y=n[++f]):(r(s)&&(s=ni(t,p,h)),r(l=o(y.key)?s[y.key]:S(y,t,p,h))?d(y,i,e,v.elm,!1,n,f):ti(u=t[l],y)?(C(u,y,i,n,f),t[l]=void 0,x&&c.insertBefore(e,u.elm,v.elm)):d(y,i,e,v.elm,!1,n,f),y=n[++f]);p>h?b(e,r(n[g+1])?null:n[g+1].elm,n,f,g,i):f>g&&w(t,p,h)}(p,m,g,n,u):o(g)?(o(e.text)&&c.setTextContent(p,""),b(p,null,g,0,g.length-1,n)):o(m)?w(m,0,m.length-1):o(e.text)&&c.setTextContent(p,""):e.text!==t.text&&c.setTextContent(p,t.text),o(h)&&o(f=h.hook)&&o(f=f.postpatch)&&f(e,t)}}}function k(e,t,n){if(a(n)&&o(e.parent))e.parent.data.pendingInsert=t;else for(var i=0;i<t.length;++i)t[i].data.hook.insert(t[i])}var O=m("attrs,class,staticClass,staticStyle,key");function A(e,t,n,i){var r,s=t.tag,l=t.data,c=t.children;if(i=i||l&&l.pre,t.elm=e,a(t.isComment)&&o(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(r=l.hook)&&o(r=r.init)&&r(t,!0),o(r=t.componentInstance)))return p(t,n),!0;if(o(s)){if(o(c))if(e.hasChildNodes())if(o(r=l)&&o(r=r.domProps)&&o(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var u=!0,d=e.firstChild,f=0;f<c.length;f++){if(!d||!A(d,c[f],n,i)){u=!1;break}d=d.nextSibling}if(!u||d)return!1}else h(t,c,n);if(o(l)){var v=!1;for(var m in l)if(!O(m)){v=!0,g(t,n);break}!v&&l.class&&it(l.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!r(t)){var l,u=!1,p=[];if(r(e))u=!0,d(t,p);else{var f=o(e.nodeType);if(!f&&ti(e,t))C(e,t,p,null,null,s);else{if(f){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),n=!0),a(n)&&A(e,t,p))return k(t,p,!0),e;l=e,e=new he(c.tagName(l).toLowerCase(),{},[],void 0,l)}var h=e.elm,m=c.parentNode(h);if(d(t,p,h._leaveCb?null:m,c.nextSibling(h)),o(t.parent))for(var g=t.parent,y=v(t);g;){for(var b=0;b<i.destroy.length;++b)i.destroy[b](g);if(g.elm=t.elm,y){for(var x=0;x<i.create.length;++x)i.create[x](Zn,g);var S=g.data.hook.insert;if(S.merged)for(var O=1;O<S.fns.length;O++)S.fns[O]()}else Yn(g);g=g.parent}o(m)?w([e],0,0):o(e.tag)&&_(e)}}return k(t,p,u),t.elm}o(e)&&_(e)}}({nodeOps:Qn,modules:[fi,mi,Si,Oi,Ri,q?{create:sr,activate:sr,remove:function(e,t){!0!==e.data.show?rr(e,t):t()}}:{}].concat(ci)});Q&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&mr(e,"input")}));var cr={inserted:function(e,t,n,i){"select"===n.tag?(i.elm&&!i.elm._vOptions?st(n,"postpatch",(function(){cr.componentUpdated(e,t,n)})):ur(e,t,n.context),e._vOptions=[].map.call(e.options,fr)):("textarea"===n.tag||Wn(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",hr),e.addEventListener("compositionend",vr),e.addEventListener("change",vr),Q&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){ur(e,t,n.context);var i=e._vOptions,r=e._vOptions=[].map.call(e.options,fr);if(r.some((function(e,t){return!D(e,i[t])})))(e.multiple?t.value.some((function(e){return pr(e,r)})):t.value!==t.oldValue&&pr(t.value,r))&&mr(e,"change")}}};function ur(e,t,n){dr(e,t,n),(W||X)&&setTimeout((function(){dr(e,t,n)}),0)}function dr(e,t,n){var i=t.value,r=e.multiple;if(!r||Array.isArray(i)){for(var o,a,s=0,l=e.options.length;s<l;s++)if(a=e.options[s],r)o=I(i,fr(a))>-1,a.selected!==o&&(a.selected=o);else if(D(fr(a),i))return void(e.selectedIndex!==s&&(e.selectedIndex=s));r||(e.selectedIndex=-1)}}function pr(e,t){return t.every((function(t){return!D(t,e)}))}function fr(e){return"_value"in e?e._value:e.value}function hr(e){e.target.composing=!0}function vr(e){e.target.composing&&(e.target.composing=!1,mr(e.target,"input"))}function mr(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function gr(e){return!e.componentInstance||e.data&&e.data.transition?e:gr(e.componentInstance._vnode)}var yr={model:cr,show:{bind:function(e,t,n){var i=t.value,r=(n=gr(n)).data&&n.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;i&&r?(n.data.show=!0,ir(n,(function(){e.style.display=o}))):e.style.display=i?o:"none"},update:function(e,t,n){var i=t.value;!i!=!t.oldValue&&((n=gr(n)).data&&n.data.transition?(n.data.show=!0,i?ir(n,(function(){e.style.display=e.__vOriginalDisplay})):rr(n,(function(){e.style.display="none"}))):e.style.display=i?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,i,r){r||(e.style.display=e.__vOriginalDisplay)}}},br={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function _r(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?_r(Vt(t.children)):e}function wr(e){var t={},n=e.$options;for(var i in n.propsData)t[i]=e[i];var r=n._parentListeners;for(var o in r)t[S(o)]=r[o];return t}function xr(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Sr=function(e){return e.tag||zt(e)},Cr=function(e){return"show"===e.name},kr={name:"transition",props:br,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Sr)).length){0;var i=this.mode;0;var r=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return r;var o=_r(r);if(!o)return r;if(this._leaving)return xr(e,r);var a="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?a+"comment":a+o.tag:s(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var l=(o.data||(o.data={})).transition=wr(this),c=this._vnode,u=_r(c);if(o.data.directives&&o.data.directives.some(Cr)&&(o.data.show=!0),u&&u.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(o,u)&&!zt(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var d=u.data.transition=L({},l);if("out-in"===i)return this._leaving=!0,st(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),xr(e,r);if("in-out"===i){if(zt(o))return c;var p,f=function(){p()};st(l,"afterEnter",f),st(l,"enterCancelled",f),st(d,"delayLeave",(function(e){p=e}))}}return r}}},Or=L({tag:String,moveClass:String},br);function Ar(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Tr(e){e.data.newPos=e.elm.getBoundingClientRect()}function Lr(e){var t=e.data.pos,n=e.data.newPos,i=t.left-n.left,r=t.top-n.top;if(i||r){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate("+i+"px,"+r+"px)",o.transitionDuration="0s"}}delete Or.mode;var Er={Transition:kr,TransitionGroup:{props:Or,beforeMount:function(){var e=this,t=this._update;this._update=function(n,i){var r=Qt(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,r(),t.call(e,n,i)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),i=this.prevChildren=this.children,r=this.$slots.default||[],o=this.children=[],a=wr(this),s=0;s<r.length;s++){var l=r[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))o.push(l),n[l.key]=l,(l.data||(l.data={})).transition=a;else;}if(i){for(var c=[],u=[],d=0;d<i.length;d++){var p=i[d];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?c.push(p):u.push(p)}this.kept=e(t,null,c),this.removed=u}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Ar),e.forEach(Tr),e.forEach(Lr),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,i=n.style;Qi(n,t),i.transform=i.WebkitTransform=i.transitionDuration="",n.addEventListener(qi,n._moveCb=function e(i){i&&i.target!==n||i&&!/transform$/.test(i.propertyName)||(n.removeEventListener(qi,e),n._moveCb=null,Xi(n,t))})}})))},methods:{hasMove:function(e,t){if(!zi)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Hi(n,e)})),Fi(n,t),n.style.display="none",this.$el.appendChild(n);var i=er(n);return this.$el.removeChild(n),this._hasMove=i.hasTransform}}}};Sn.config.mustUseProp=function(e,t,n){return"value"===n&&Mn(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},Sn.config.isReservedTag=Gn,Sn.config.isReservedAttr=$n,Sn.config.getTagNamespace=function(e){return Jn(e)?"svg":"math"===e?"math":void 0},Sn.config.isUnknownElement=function(e){if(!q)return!0;if(Gn(e))return!1;if(e=e.toLowerCase(),null!=Kn[e])return Kn[e];var t=document.createElement(e);return e.indexOf("-")>-1?Kn[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Kn[e]=/HTMLUnknownElement/.test(t.toString())},L(Sn.options.directives,yr),L(Sn.options.components,Er),Sn.prototype.__patch__=q?lr:$,Sn.prototype.$mount=function(e,t){return function(e,t,n){var i;return e.$el=t,e.$options.render||(e.$options.render=me),Zt(e,"beforeMount"),i=function(){e._update(e._render(),n)},new pn(e,i,$,{before:function(){e._isMounted&&!e._isDestroyed&&Zt(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Zt(e,"mounted")),e}(this,e=e&&q?function(e){if("string"==typeof e){var t=document.querySelector(e);return t||document.createElement("div")}return e}(e):void 0,t)},q&&setTimeout((function(){F.devtools&&re&&re.emit("init",Sn)}),0),t.a=Sn}).call(this,n(26),n(63).setImmediate)},function(e,t,n){var i=n(3),r=n(23);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){(t=n(4)(!1)).push([e.i,'.ss-main{position:relative;display:inline-block;user-select:none;color:#666;width:100%}.ss-main .ss-single-selected{display:flex;cursor:pointer;width:100%;height:30px;padding:6px;border:1px solid #dcdee2;border-radius:4px;background-color:#fff;outline:0;box-sizing:border-box;transition:background-color .2s}.ss-main .ss-single-selected.ss-disabled{background-color:#dcdee2;cursor:not-allowed}.ss-main .ss-single-selected.ss-open-above{border-top-left-radius:0;border-top-right-radius:0}.ss-main .ss-single-selected.ss-open-below{border-bottom-left-radius:0;border-bottom-right-radius:0}.ss-main .ss-single-selected .placeholder{flex:1 1 100%;text-align:left;width:calc(100% - 30px);line-height:1em;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ss-main .ss-single-selected .placeholder,.ss-main .ss-single-selected .placeholder *{display:flex;align-items:center;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ss-main .ss-single-selected .placeholder *{width:auto}.ss-main .ss-single-selected .placeholder .ss-disabled{color:#dedede}.ss-main .ss-single-selected .ss-deselect{display:flex;align-items:center;justify-content:flex-end;flex:0 1 auto;margin:0 6px;font-weight:700}.ss-main .ss-single-selected .ss-deselect.ss-hide{display:none}.ss-main .ss-single-selected .ss-arrow{display:flex;align-items:center;justify-content:flex-end;flex:0 1 auto;margin:0 6px}.ss-main .ss-single-selected .ss-arrow span{border:solid #666;border-width:0 2px 2px 0;display:inline-block;padding:3px;transition:transform .2s,margin .2s}.ss-main .ss-single-selected .ss-arrow span.arrow-up{transform:rotate(-135deg);margin:3px 0 0}.ss-main .ss-single-selected .ss-arrow span.arrow-down{transform:rotate(45deg);margin:-3px 0 0}.ss-main .ss-multi-selected{display:flex;flex-direction:row;cursor:pointer;min-height:30px;width:100%;padding:0 0 0 3px;border:1px solid #dcdee2;border-radius:4px;background-color:#fff;outline:0;box-sizing:border-box;transition:background-color .2s}.ss-main .ss-multi-selected.ss-disabled{background-color:#dcdee2;cursor:not-allowed}.ss-main .ss-multi-selected.ss-disabled .ss-values .ss-disabled{color:#666}.ss-main .ss-multi-selected.ss-disabled .ss-values .ss-value .ss-value-delete{cursor:not-allowed}.ss-main .ss-multi-selected.ss-open-above{border-top-left-radius:0;border-top-right-radius:0}.ss-main .ss-multi-selected.ss-open-below{border-bottom-left-radius:0;border-bottom-right-radius:0}.ss-main .ss-multi-selected .ss-values{display:flex;flex-wrap:wrap;justify-content:flex-start;flex:1 1 100%;width:calc(100% - 30px)}.ss-main .ss-multi-selected .ss-values .ss-disabled{display:flex;padding:4px 5px;margin:2px 0;line-height:1em;align-items:center;width:100%;color:#dedede;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@keyframes scaleIn{0%{transform:scale(0);opacity:0}to{transform:scale(1);opacity:1}}@keyframes scaleOut{0%{transform:scale(1);opacity:1}to{transform:scale(0);opacity:0}}.ss-main .ss-multi-selected .ss-values .ss-value{display:flex;user-select:none;align-items:center;font-size:12px;padding:3px 5px;margin:3px 5px 3px 0;color:#fff;background-color:#5897fb;border-radius:4px;animation-name:scaleIn;animation-duration:.2s;animation-timing-function:ease-out;animation-fill-mode:both}.ss-main .ss-multi-selected .ss-values .ss-value.ss-out{animation-name:scaleOut;animation-duration:.2s;animation-timing-function:ease-out}.ss-main .ss-multi-selected .ss-values .ss-value .ss-value-delete{margin:0 0 0 5px;cursor:pointer}.ss-main .ss-multi-selected .ss-add{display:flex;flex:0 1 3px;margin:9px 12px 0 5px}.ss-main .ss-multi-selected .ss-add .ss-plus{display:flex;justify-content:center;align-items:center;background:#666;position:relative;height:10px;width:2px;transition:transform .2s}.ss-main .ss-multi-selected .ss-add .ss-plus:after{background:#666;content:"";position:absolute;height:2px;width:10px;left:-4px;top:4px}.ss-main .ss-multi-selected .ss-add .ss-plus.ss-cross{transform:rotate(45deg)}.ss-content{position:absolute;width:100%;margin:-1px 0 0;box-sizing:border-box;border:1px solid #dcdee2;z-index:1010;background-color:#fff;transform-origin:center top;transition:transform .2s,opacity .2s;opacity:0;transform:scaleY(0)}.ss-content.ss-open{display:block;opacity:1;transform:scaleY(1)}.ss-content .ss-search{display:flex;flex-direction:row;padding:8px 8px 6px}.ss-content .ss-search.ss-hide,.ss-content .ss-search.ss-hide input{height:0;opacity:0;padding:0;margin:0}.ss-content .ss-search input{display:inline-flex;font-size:inherit;line-height:inherit;flex:1 1 auto;width:100%;min-width:0;height:30px;padding:6px 8px;margin:0;border:1px solid #dcdee2;border-radius:4px;background-color:#fff;outline:0;text-align:left;box-sizing:border-box;-webkit-box-sizing:border-box;-webkit-appearance:textfield}.ss-content .ss-search input::placeholder{color:#8a8a8a;vertical-align:middle}.ss-content .ss-search input:focus{box-shadow:0 0 5px #5897fb}.ss-content .ss-search .ss-addable{display:inline-flex;justify-content:center;align-items:center;cursor:pointer;font-size:22px;font-weight:700;flex:0 0 30px;height:30px;margin:0 0 0 8px;border:1px solid #dcdee2;border-radius:4px;box-sizing:border-box}.ss-content .ss-addable{padding-top:0}.ss-content .ss-list{max-height:200px;overflow-x:hidden;overflow-y:auto;text-align:left}.ss-content .ss-list .ss-optgroup .ss-optgroup-label{padding:6px 10px;font-weight:700}.ss-content .ss-list .ss-optgroup .ss-option{padding:6px 6px 6px 25px}.ss-content .ss-list .ss-optgroup-label-selectable{cursor:pointer}.ss-content .ss-list .ss-optgroup-label-selectable:hover{color:#fff;background-color:#5897fb}.ss-content .ss-list .ss-option{padding:6px 10px;cursor:pointer;user-select:none}.ss-content .ss-list .ss-option *{display:inline-block}.ss-content .ss-list .ss-option.ss-highlighted,.ss-content .ss-list .ss-option:hover{color:#fff;background-color:#5897fb}.ss-content .ss-list .ss-option.ss-disabled{cursor:not-allowed;color:#dedede;background-color:#fff}.ss-content .ss-list .ss-option:not(.ss-disabled).ss-option-selected{color:#666;background-color:rgba(88,151,251,.1)}.ss-content .ss-list .ss-option.ss-hide{display:none}.ss-content .ss-list .ss-option .ss-search-highlight{background-color:#fffb8c}',""]),e.exports=t},function(e,t,n){var i=n(3),r=n(25);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var o={insert:("html","html"),singleton:!1},a=(i(r,o),r.locals?r.locals:{});e.exports=a},function(e,t,n){(t=n(4)(!1)).push([e.i,".stadiaplus_dropdown.style-dark.ss-main{border-color:#3c3e43;width:auto}.stadiaplus_dropdown.style-dark.ss-main .ss-content{border-color:#3c3e43}.stadiaplus_dropdown.style-dark.ss-main .ss-content .ss-list .ss-option{background-color:#3c3e43;color:rgba(255,255,255,.8)}.stadiaplus_dropdown.style-dark.ss-main .ss-content .ss-list .ss-option.ss-disabled{background-color:#3c3e43;color:rgba(255,255,255,.4)}.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected{background:transparent;border:none;border-bottom:#93959f 1px solid;border-radius:0;width:180px}.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected .placeholder,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected .placeholder{color:rgba(255,255,255,.8)}.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected .ss-plus span,.stadiaplus_dropdown.style-dark.ss-main .ss-multi-selected .ss-arrow span,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected .ss-plus span,.stadiaplus_dropdown.style-dark.ss-main .ss-single-selected .ss-arrow span{border-color:#93959f}.stadiaplus_dropdown.style-light.ss-main{width:auto}.stadiaplus_dropdown.style-light.ss-main .ss-multi-selected,.stadiaplus_dropdown.style-light.ss-main .ss-single-selected{background:transparent;border:none;border-bottom:#ccc 1px solid;border-radius:0;width:180px}.stadiaplus_dropdown.style-light.ss-main .ss-multi-selected .ss-plus span,.stadiaplus_dropdown.style-light.ss-main .ss-multi-selected .ss-arrow span,.stadiaplus_dropdown.style-light.ss-main .ss-single-selected .ss-plus span,.stadiaplus_dropdown.style-light.ss-main .ss-single-selected .ss-arrow span{border-color:#ccc}.stadiaplus_dropdown.style-slimselect-large.ss-main{width:200px;height:40px}.stadiaplus_dropdown.style-slimselect-large.ss-main .ss-multi-selected,.stadiaplus_dropdown.style-slimselect-large.ss-main .ss-single-selected{height:100%}",""]),e.exports=t},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var i=n(14);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,"\nh3[data-v-24dcaec2] {\n  margin: 40px 0 0;\n}\nul[data-v-24dcaec2] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-24dcaec2] {\n  display: inline-block;\n  margin: 0 10px;\n}\na[data-v-24dcaec2] {\n  color: #42b983;\n}\n",""]),e.exports=t},function(e,t,n){"use strict";var i=n(15);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".heading[data-v-f1017644]{margin-top:.5rem;margin-bottom:1.5rem;display:flex;align-items:center}.back-button[data-v-f1017644]{padding:4px;margin-right:4px;border-radius:50%;cursor:pointer}.back-button[data-v-f1017644]:hover{background:rgba(0,0,0,.06)}h1[data-v-f1017644]{margin-bottom:0;font-weight:500;font-size:24px;color:#424242}.icon[data-v-f1017644]{cursor:pointer;color:#424242;margin-left:auto;font-size:30px;vertical-align:text-top}img[data-v-f1017644]{height:29px;margin-right:.5rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(16);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".button[data-v-82c267d8]{cursor:pointer;display:block;padding:1rem;margin:.5rem 0;border-radius:8px;background:#f0f0f0;color:#505050;text-align:center;display:block;text-decoration:none}.button[disabled][data-v-82c267d8]{opacity:.7;pointer-events:none;cursor:initial}.button.gradient[data-v-82c267d8]{background:linear-gradient(90deg, #FA4821 0%, #AE0F56 100%);color:#fff}.button .material-icons[data-v-82c267d8]{vertical-align:text-top;font-size:18px;margin-right:.25rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(17);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".container[data-v-ff9f0e22]{padding:1rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(18);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,'*{margin:0;padding:0}#app{font-size:16px;font-family:"Roboto",sans-serif;width:340px;height:425px;color:#585858}h1,h2,h3,h4,h5,p{margin-bottom:1.5rem}h3{font-weight:500}hr{margin:1rem 0;border:none;border-bottom:2px solid #f0f0f0}.row{display:flex;margin:0 -0.5rem}.col{margin:0 .5rem;width:100%}.router-view{position:absolute;transition:all .5s cubic-bezier(0.55, 0, 0.1, 1);width:100%;height:100%}.slide-left-enter,.slide-right-leave-active{-webkit-transform:translate(100vw, 0);transform:translate(100vw, 0)}.slide-left-leave-active,.slide-right-enter{-webkit-transform:translate(-100vw, 0);transform:translate(-100vw, 0)}footer{position:absolute;width:calc(100% - 2rem);padding:1rem;bottom:0;display:flex;justify-content:space-between;opacity:.5;margin-top:1rem}footer span,footer a{color:#000;font-size:12px}',""]),e.exports=t},function(e,t,n){"use strict";var i=n(19);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".container[data-v-55bb55d9]{padding:1rem}",""]),e.exports=t},function(e,t,n){"use strict";var i=n(20);n.n(i).a},function(e,t,n){(t=n(4)(!1)).push([e.i,".container[data-v-66c1a282]{padding:1rem}h3[data-v-66c1a282]{margin-bottom:.5rem}",""]),e.exports=t},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(64),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(26))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r,o,a,s,l=1,c={},u=!1,d=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick((function(){h(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){h(e.data)},i=function(e){o.port2.postMessage(e)}):d&&"onreadystatechange"in d.createElement("script")?(r=d.documentElement,i=function(e){var t=d.createElement("script");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):i=function(e){setTimeout(h,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),i=function(t){e.postMessage(a+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return c[l]=r,i(l),l++},p.clearImmediate=f}function f(e){delete c[e]}function h(e){if(u)setTimeout(h,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{f(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(26),n(65))},function(e,t){var n,i,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{i="function"==typeof clearTimeout?clearTimeout:a}catch(e){i=a}}();var l,c=[],u=!1,d=-1;function p(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&f())}function f(){if(!u){var e=s(p);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===a||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||s(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=v,r.addListener=v,r.once=v,r.off=v,r.removeListener=v,r.removeAllListeners=v,r.emit=v,r.prependListener=v,r.prependOnceListener=v,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";n.r(t);var i=n(21),r=function(){var e=this.$createElement,t=this._self._c||e;return t("div",{attrs:{id:"app"}},[t("transition",{attrs:{name:this.transitionName}},[t("router-view",{staticClass:"router-view"})],1),this._v(" "),t("footer",[t("span",[this._v("Stadia+ 2.1")]),this._v(" "),t("span",{domProps:{innerHTML:this._s(this.credit)}})])],1)};r._withStripped=!0;var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"hello"},[n("h1",[e._v(e._s(e.msg))]),e._v(" "),e._m(0),e._v(" "),n("h3",[e._v("Installed CLI Plugins")]),e._v(" "),n("ul"),e._v(" "),n("h3",[e._v("Essential Links")]),e._v(" "),e._m(1),e._v(" "),n("h3",[e._v("Ecosystem")]),e._v(" "),e._m(2)])};o._withStripped=!0;var a={name:"HelloWorld",props:{msg:String}};n(49);function s(e,t,n,i,r,o,a,s){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=n,c._compiled=!0),i&&(c.functional=!0),o&&(c._scopeId="data-v-"+o),a?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},c._ssrRegister=l):r&&(l=s?function(){r.call(this,this.$root.$options.shadowRoot)}:r),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,t){return l.call(t),u(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}var l=s(a,o,[function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n    For a guide and recipes on how to configure / customize this project,"),t("br"),this._v("\n    check out the\n    "),t("a",{attrs:{href:"https://cli.vuejs.org",target:"_blank",rel:"noopener"}},[this._v("vue-cli documentation")]),this._v(".\n  ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("a",{attrs:{href:"https://vuejs.org",target:"_blank",rel:"noopener"}},[e._v("Core Docs")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://forum.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("Forum")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://chat.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("Community Chat")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://twitter.com/vuejs",target:"_blank",rel:"noopener"}},[e._v("Twitter")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://news.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("News")])])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[n("a",{attrs:{href:"https://router.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("vue-router")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://vuex.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("vuex")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/vuejs/vue-devtools#vue-devtools",target:"_blank",rel:"noopener"}},[e._v("vue-devtools")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://vue-loader.vuejs.org",target:"_blank",rel:"noopener"}},[e._v("vue-loader")])]),e._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/vuejs/awesome-vue",target:"_blank",rel:"noopener"}},[e._v("awesome-vue")])])])}],!1,null,"24dcaec2",null);l.options.__file="src/popup/src/components/HelloWorld.vue";var c=l.exports,u=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"main-page"},[n("div",{staticClass:"container"},[n("page-header",{attrs:{img:e.logo,icon:"settings"},on:{"icon-click":e.settings}},[e._v(e._s(e.Language.get("popup.main-page.title")))]),e._v(" "),n("p",[e._v("\n            "+e._s(e.Language.get("popup.main-page.ready-text"))+"\n        ")]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("btn",{attrs:{gradient:!0},on:{click:function(t){return e.open("https://stadia.google.com")}}},[n("icon",[e._v("launch")]),e._v("\n                    "+e._s(e.Language.get("popup.main-page.launch-button"))+"\n                ")],1)],1)]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("btn",{on:{click:function(t){return e.open("https://github.com/Mafrans/StadiaPlus/wiki")}}},[n("icon",[e._v("help_outline")]),e._v("\n                    "+e._s(e.Language.get("popup.main-page.help-button"))+"\n                ")],1)],1)]),e._v(" "),n("hr"),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("btn",{on:{click:function(t){return e.open("https://discord.gg/2VDbEQ8")}}},[e._v("\n                    "+e._s(e.Language.get("popup.main-page.discord"))+"\n                ")])],1),e._v(" "),n("div",{staticClass:"col"},[n("btn",{on:{click:function(t){return e.open("https://www.reddit.com/r/Stadia/comments/fz7xgm/stadia_20_what_youve_all_been_waiting_for/")}}},[e._v("\n                    "+e._s(e.Language.get("popup.main-page.reddit"))+"\n                ")])],1)])],1)])};u._withStripped=!0;var d=function(){var e=this.$createElement;return(this._self._c||e)("span",{staticClass:"material-icons",on:{click:this.click}},[this._t("default")],2)};d._withStripped=!0;var p=s({methods:{click(){this.$emit("click")}}},d,[],!1,null,null,null);p.options.__file="src/popup/src/components/Icon.vue";var f=p.exports,h=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"heading"},[e.backButton?n("icon",{staticClass:"back-button",on:{click:e.back}},[e._v("arrow_back")]):n("img",{attrs:{src:e.img,alt:"Header image"}}),e._v(" "),n("h1",[e._t("default")],2),e._v(" "),n("icon",{staticClass:"icon",on:{click:e.iconClick}},[e._v(e._s(e.icon))])],1)};h._withStripped=!0;var v={components:{Icon:f},props:["icon","img","back-button"],methods:{iconClick(){this.$emit("icon-click")},back(){console.log("go back!"),this.$router.go(-1)}}},m=(n(51),s(v,h,[],!1,null,"f1017644",null));m.options.__file="src/popup/src/components/PageHeader.vue";var g=m.exports,y=function(){var e=this.$createElement;return(this._self._c||e)("div",{staticClass:"button",class:{gradient:this.gradient},on:{click:this.click}},[this._t("default")],2)};y._withStripped=!0;var b={props:["gradient"],methods:{click(){this.$emit("click")}}},_=(n(53),s(b,y,[],!1,null,"82c267d8",null));_.options.__file="src/popup/src/components/Button.vue";var w=_.exports,x=n.p+"f290a85efd04679ba441c9ea85ccc52a.png",S=n(0),C={data:()=>({logo:x,Language:S.a}),components:{Icon:f,PageHeader:g,btn:w},methods:{settings(){this.$router.push("settings")},open(e){window.open(e,"_blank")}}},k=(n(55),s(C,u,[],!1,null,"ff9f0e22",null));k.options.__file="src/popup/src/MainPage.vue";var O=k.exports,A=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("select",{ref:"selectbox"},e._l(e.items,(function(t,i){return n("option",{key:i,domProps:{value:t.value}},[e._v("\n        "+e._s(t.label)+"\n    ")])})),0)};A._withStripped=!0;var T=n(5),L=s({props:["placeholder","items","selectstyle","selected"],mounted(){const e=new T.a(this.$refs.selectbox,{placeholder:this.placeholder,style:void 0!==this.selectstyle?this.selectstyle:T.b.SLIMSELECT,onChange:e=>{this.$emit("change",e)},beforeChange:e=>{this.$emit("before-change",e)}});void 0!==this.selected&&e.set(this.selected.tag)}},A,[],!1,null,null,null);L.options.__file="src/popup/src/components/SelectBox.vue";var E=L.exports,$={name:"App",data:()=>({transitionName:"slide-left",credit:S.a.get("popup.footer.credit",{name:'<a href="https://reddit.com/u/Mafrans">Mafrans</a>'})}),watch:{$route(e,t){const n=e.path.split("/").filter(e=>""!==e).length,i=t.path.split("/").filter(e=>""!==e).length;this.transitionName=n<i?"slide-right":"slide-left"}},components:{HelloWorld:c,SelectBox:E,MainPage:O}},M=(n(57),s($,r,[],!1,null,null,null));M.options.__file="src/popup/src/App.vue";var j=M.exports,D=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"settings-page"},[n("div",{staticClass:"container"},[n("page-header",{attrs:{"back-button":!0,icon:"code"},on:{"icon-click":e.developer}},[e._v(e._s(e.Language.get("popup.settings-page.title")))]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("icon",{style:{float:"left",marginRight:"4px"}},[e._v("language")]),e._v(" "),n("h3",{style:{marginBottom:"0.5rem"}},[e._v("\n                    "+e._s(e.Language.get("popup.settings-page.language"))+"\n                ")]),e._v(" "),n("select-box",{attrs:{items:e.languages,selected:e.currentLanguage,selectstyle:e.SelectStyle.SLIMSELECT_LARGE},on:{change:e.changeLanguage}})],1)])],1)])};D._withStripped=!0;var I=n(2),P={data:()=>({Language:S.a,logo:x,languages:S.a.languages.map(e=>({value:e.tag,label:e.name})),currentLanguage:S.a.current,SelectStyle:T.b}),components:{Icon:f,PageHeader:g,btn:w,SelectBox:E},methods:{developer(){this.$router.push("settings/developer")},open(e){window.open(e,"_blank")},changeLanguage(e){let t=e.value;"automatic"===t&&(t=S.a.automatic()),I.b.LANGUAGE.set(t)}}},R=(n(59),s(P,D,[],!1,null,"55bb55d9",null));R.options.__file="src/popup/src/SettingsPage.vue";var N=R.exports,F=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"developer-page"},[n("div",{staticClass:"container"},[n("page-header",{attrs:{"back-button":!0}},[e._v(e._s(e.Language.get("popup.developer-page.title")))]),e._v(" "),n("div",{staticClass:"row"},[n("div",{staticClass:"col"},[n("h3",[e._v(e._s(e.Language.get("popup.developer-page.storage")))]),e._v(" "),n("btn",{on:{click:function(t){return e.clearStorage()}}},[n("icon",[e._v("clear_all")]),e._v("\n                    "+e._s(e.Language.get("popup.developer-page.clear-cache-button"))+"\n                ")],1)],1)])],1)])};F._withStripped=!0;var H={data:()=>({Language:S.a}),components:{Icon:f,PageHeader:g,btn:w},methods:{clearStorage(){I.a.clear(),I.b.clear()}}},U=(n(61),s(H,F,[],!1,null,"66c1a282",null));U.options.__file="src/popup/src/DeveloperPage.vue";var B=U.exports;
/*!
  * vue-router v3.1.6
  * (c) 2020 Evan You
  * @license MIT
  */function z(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function V(e,t){return t instanceof e||t&&(t.name===e.name||t._name===e._name)}function q(e,t){for(var n in t)e[n]=t[n];return e}var J={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,i=t.children,r=t.parent,o=t.data;o.routerView=!0;for(var a=r.$createElement,s=n.name,l=r.$route,c=r._routerViewCache||(r._routerViewCache={}),u=0,d=!1;r&&r._routerRoot!==r;){var p=r.$vnode?r.$vnode.data:{};p.routerView&&u++,p.keepAlive&&r._directInactive&&r._inactive&&(d=!0),r=r.$parent}if(o.routerViewDepth=u,d){var f=c[s],h=f&&f.component;return h?(f.configProps&&G(h,o,f.route,f.configProps),a(h,o,i)):a()}var v=l.matched[u],m=v&&v.components[s];if(!v||!m)return c[s]=null,a();c[s]={component:m},o.registerRouteInstance=function(e,t){var n=v.instances[s];(t&&n!==e||!t&&n===e)&&(v.instances[s]=t)},(o.hook||(o.hook={})).prepatch=function(e,t){v.instances[s]=t.componentInstance},o.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==v.instances[s]&&(v.instances[s]=e.componentInstance)};var g=v.props&&v.props[s];return g&&(q(c[s],{route:l,configProps:g}),G(m,o,l,g)),a(m,o,i)}};function G(e,t,n,i){var r=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0;default:0}}(n,i);if(r){r=t.props=q({},r);var o=t.attrs=t.attrs||{};for(var a in r)e.props&&a in e.props||(o[a]=r[a],delete r[a])}}var K=/[!'()*]/g,W=function(e){return"%"+e.charCodeAt(0).toString(16)},Q=/%2C/g,X=function(e){return encodeURIComponent(e).replace(K,W).replace(Q,",")},Y=decodeURIComponent;function Z(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),i=Y(n.shift()),r=n.length>0?Y(n.join("=")):null;void 0===t[i]?t[i]=r:Array.isArray(t[i])?t[i].push(r):t[i]=[t[i],r]})),t):t}function ee(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return X(t);if(Array.isArray(n)){var i=[];return n.forEach((function(e){void 0!==e&&(null===e?i.push(X(t)):i.push(X(t)+"="+X(e)))})),i.join("&")}return X(t)+"="+X(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var te=/\/?$/;function ne(e,t,n,i){var r=i&&i.options.stringifyQuery,o=t.query||{};try{o=ie(o)}catch(e){}var a={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:o,params:t.params||{},fullPath:ae(t,r),matched:e?oe(e):[]};return n&&(a.redirectedFrom=ae(n,r)),Object.freeze(a)}function ie(e){if(Array.isArray(e))return e.map(ie);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=ie(e[n]);return t}return e}var re=ne(null,{path:"/"});function oe(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function ae(e,t){var n=e.path,i=e.query;void 0===i&&(i={});var r=e.hash;return void 0===r&&(r=""),(n||"/")+(t||ee)(i)+r}function se(e,t){return t===re?e===t:!!t&&(e.path&&t.path?e.path.replace(te,"")===t.path.replace(te,"")&&e.hash===t.hash&&le(e.query,t.query):!(!e.name||!t.name)&&(e.name===t.name&&e.hash===t.hash&&le(e.query,t.query)&&le(e.params,t.params)))}function le(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e),i=Object.keys(t);return n.length===i.length&&n.every((function(n){var i=e[n],r=t[n];return"object"==typeof i&&"object"==typeof r?le(i,r):String(i)===String(r)}))}function ce(e,t,n){var i=e.charAt(0);if("/"===i)return e;if("?"===i||"#"===i)return t+e;var r=t.split("/");n&&r[r.length-1]||r.pop();for(var o=e.replace(/^\//,"").split("/"),a=0;a<o.length;a++){var s=o[a];".."===s?r.pop():"."!==s&&r.push(s)}return""!==r[0]&&r.unshift(""),r.join("/")}function ue(e){return e.replace(/\/\//g,"/")}var de=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},pe=Oe,fe=ye,he=function(e,t){return _e(ye(e,t))},ve=_e,me=ke,ge=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function ye(e,t){for(var n,i=[],r=0,o=0,a="",s=t&&t.delimiter||"/";null!=(n=ge.exec(e));){var l=n[0],c=n[1],u=n.index;if(a+=e.slice(o,u),o=u+l.length,c)a+=c[1];else{var d=e[o],p=n[2],f=n[3],h=n[4],v=n[5],m=n[6],g=n[7];a&&(i.push(a),a="");var y=null!=p&&null!=d&&d!==p,b="+"===m||"*"===m,_="?"===m||"*"===m,w=n[2]||s,x=h||v;i.push({name:f||r++,prefix:p||"",delimiter:w,optional:_,repeat:b,partial:y,asterisk:!!g,pattern:x?xe(x):g?".*":"[^"+we(w)+"]+?"})}}return o<e.length&&(a+=e.substr(o)),a&&i.push(a),i}function be(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function _e(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,i){for(var r="",o=n||{},a=(i||{}).pretty?be:encodeURIComponent,s=0;s<e.length;s++){var l=e[s];if("string"!=typeof l){var c,u=o[l.name];if(null==u){if(l.optional){l.partial&&(r+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(de(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<u.length;d++){if(c=a(u[d]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");r+=(0===d?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):a(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');r+=l.prefix+c}}else r+=l}return r}}function we(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function xe(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function Se(e,t){return e.keys=t,e}function Ce(e){return e.sensitive?"":"i"}function ke(e,t,n){de(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,r=!1!==n.end,o="",a=0;a<e.length;a++){var s=e[a];if("string"==typeof s)o+=we(s);else{var l=we(s.prefix),c="(?:"+s.pattern+")";t.push(s),s.repeat&&(c+="(?:"+l+c+")*"),o+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=we(n.delimiter||"/"),d=o.slice(-u.length)===u;return i||(o=(d?o.slice(0,-u.length):o)+"(?:"+u+"(?=$))?"),o+=r?"$":i&&d?"":"(?="+u+"|$)",Se(new RegExp("^"+o,Ce(n)),t)}function Oe(e,t,n){return de(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var i=0;i<n.length;i++)t.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Se(e,t)}(e,t):de(e)?function(e,t,n){for(var i=[],r=0;r<e.length;r++)i.push(Oe(e[r],t,n).source);return Se(new RegExp("(?:"+i.join("|")+")",Ce(n)),t)}(e,t,n):function(e,t,n){return ke(ye(e,n),t,n)}(e,t,n)}pe.parse=fe,pe.compile=he,pe.tokensToFunction=ve,pe.tokensToRegExp=me;var Ae=Object.create(null);function Te(e,t,n){t=t||{};try{var i=Ae[e]||(Ae[e]=pe.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),i(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function Le(e,t,n,i){var r="string"==typeof e?{path:e}:e;if(r._normalized)return r;if(r.name){var o=(r=q({},e)).params;return o&&"object"==typeof o&&(r.params=q({},o)),r}if(!r.path&&r.params&&t){(r=q({},r))._normalized=!0;var a=q(q({},t.params),r.params);if(t.name)r.name=t.name,r.params=a;else if(t.matched.length){var s=t.matched[t.matched.length-1].path;r.path=Te(s,a,t.path)}else 0;return r}var l=function(e){var t="",n="",i=e.indexOf("#");i>=0&&(t=e.slice(i),e=e.slice(0,i));var r=e.indexOf("?");return r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),{path:e,query:n,hash:t}}(r.path||""),c=t&&t.path||"/",u=l.path?ce(l.path,c,n||r.append):c,d=function(e,t,n){void 0===t&&(t={});var i,r=n||Z;try{i=r(e||"")}catch(e){i={}}for(var o in t)i[o]=t[o];return i}(l.query,r.query,i&&i.options.parseQuery),p=r.hash||l.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:u,query:d,hash:p}}var Ee,$e=function(){},Me={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},exact:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,i=this.$route,r=n.resolve(this.to,i,this.append),o=r.location,a=r.route,s=r.href,l={},c=n.options.linkActiveClass,u=n.options.linkExactActiveClass,d=null==c?"router-link-active":c,p=null==u?"router-link-exact-active":u,f=null==this.activeClass?d:this.activeClass,h=null==this.exactActiveClass?p:this.exactActiveClass,v=a.redirectedFrom?ne(null,Le(a.redirectedFrom),null,n):a;l[h]=se(i,v),l[f]=this.exact?l[h]:function(e,t){return 0===e.path.replace(te,"/").indexOf(t.path.replace(te,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(i,v);var m=function(e){je(e)&&(t.replace?n.replace(o,$e):n.push(o,$e))},g={click:je};Array.isArray(this.event)?this.event.forEach((function(e){g[e]=m})):g[this.event]=m;var y={class:l},b=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:a,navigate:m,isActive:l[f],isExactActive:l[h]});if(b){if(1===b.length)return b[0];if(b.length>1||!b.length)return 0===b.length?e():e("span",{},b)}if("a"===this.tag)y.on=g,y.attrs={href:s};else{var _=function e(t){var n;if(t)for(var i=0;i<t.length;i++){if("a"===(n=t[i]).tag)return n;if(n.children&&(n=e(n.children)))return n}}(this.$slots.default);if(_){_.isStatic=!1;var w=_.data=q({},_.data);for(var x in w.on=w.on||{},w.on){var S=w.on[x];x in g&&(w.on[x]=Array.isArray(S)?S:[S])}for(var C in g)C in w.on?w.on[C].push(g[C]):w.on[C]=m;(_.data.attrs=q({},_.data.attrs)).href=s}else y.on=g}return e(this.tag,y,this.$slots.default)}};function je(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}var De="undefined"!=typeof window;function Ie(e,t,n,i){var r=t||[],o=n||Object.create(null),a=i||Object.create(null);e.forEach((function(e){!function e(t,n,i,r,o,a){var s=r.path,l=r.name;0;var c=r.pathToRegexpOptions||{},u=function(e,t,n){n||(e=e.replace(/\/$/,""));if("/"===e[0])return e;if(null==t)return e;return ue(t.path+"/"+e)}(s,o,c.strict);"boolean"==typeof r.caseSensitive&&(c.sensitive=r.caseSensitive);var d={path:u,regex:Pe(u,c),components:r.components||{default:r.component},instances:{},name:l,parent:o,matchAs:a,redirect:r.redirect,beforeEnter:r.beforeEnter,meta:r.meta||{},props:null==r.props?{}:r.components?r.props:{default:r.props}};r.children&&r.children.forEach((function(r){var o=a?ue(a+"/"+r.path):void 0;e(t,n,i,r,d,o)}));n[d.path]||(t.push(d.path),n[d.path]=d);if(void 0!==r.alias)for(var p=Array.isArray(r.alias)?r.alias:[r.alias],f=0;f<p.length;++f){0;var h={path:p[f],children:r.children};e(t,n,i,h,o,d.path||"/")}l&&(i[l]||(i[l]=d))}(r,o,a,e)}));for(var s=0,l=r.length;s<l;s++)"*"===r[s]&&(r.push(r.splice(s,1)[0]),l--,s--);return{pathList:r,pathMap:o,nameMap:a}}function Pe(e,t){return pe(e,[],t)}function Re(e,t){var n=Ie(e),i=n.pathList,r=n.pathMap,o=n.nameMap;function a(e,n,a){var s=Le(e,n,!1,t),c=s.name;if(c){var u=o[c];if(!u)return l(null,s);var d=u.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof s.params&&(s.params={}),n&&"object"==typeof n.params)for(var p in n.params)!(p in s.params)&&d.indexOf(p)>-1&&(s.params[p]=n.params[p]);return s.path=Te(u.path,s.params),l(u,s,a)}if(s.path){s.params={};for(var f=0;f<i.length;f++){var h=i[f],v=r[h];if(Ne(v.regex,s.path,s.params))return l(v,s,a)}}return l(null,s)}function s(e,n){var i=e.redirect,r="function"==typeof i?i(ne(e,n,null,t)):i;if("string"==typeof r&&(r={path:r}),!r||"object"!=typeof r)return l(null,n);var s=r,c=s.name,u=s.path,d=n.query,p=n.hash,f=n.params;if(d=s.hasOwnProperty("query")?s.query:d,p=s.hasOwnProperty("hash")?s.hash:p,f=s.hasOwnProperty("params")?s.params:f,c){o[c];return a({_normalized:!0,name:c,query:d,hash:p,params:f},void 0,n)}if(u){var h=function(e,t){return ce(e,t.parent?t.parent.path:"/",!0)}(u,e);return a({_normalized:!0,path:Te(h,f),query:d,hash:p},void 0,n)}return l(null,n)}function l(e,n,i){return e&&e.redirect?s(e,i||n):e&&e.matchAs?function(e,t,n){var i=a({_normalized:!0,path:Te(n,t.params)});if(i){var r=i.matched,o=r[r.length-1];return t.params=i.params,l(o,t)}return l(null,t)}(0,n,e.matchAs):ne(e,n,i,t)}return{match:a,addRoutes:function(e){Ie(e,i,r,o)}}}function Ne(e,t,n){var i=t.match(e);if(!i)return!1;if(!n)return!0;for(var r=1,o=i.length;r<o;++r){var a=e.keys[r-1],s="string"==typeof i[r]?decodeURIComponent(i[r]):i[r];a&&(n[a.name||"pathMatch"]=s)}return!0}var Fe=De&&window.performance&&window.performance.now?window.performance:Date;function He(){return Fe.now().toFixed(3)}var Ue=He();function Be(){return Ue}function ze(e){return Ue=e}var Ve=Object.create(null);function qe(){var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=q({},window.history.state);n.key=Be(),window.history.replaceState(n,"",t),window.addEventListener("popstate",(function(e){Ge(),e.state&&e.state.key&&ze(e.state.key)}))}function Je(e,t,n,i){if(e.app){var r=e.options.scrollBehavior;r&&e.app.$nextTick((function(){var o=function(){var e=Be();if(e)return Ve[e]}(),a=r.call(e,t,n,i?o:null);a&&("function"==typeof a.then?a.then((function(e){Ye(e,o)})).catch((function(e){0})):Ye(a,o))}))}}function Ge(){var e=Be();e&&(Ve[e]={x:window.pageXOffset,y:window.pageYOffset})}function Ke(e){return Qe(e.x)||Qe(e.y)}function We(e){return{x:Qe(e.x)?e.x:window.pageXOffset,y:Qe(e.y)?e.y:window.pageYOffset}}function Qe(e){return"number"==typeof e}var Xe=/^#\d/;function Ye(e,t){var n,i="object"==typeof e;if(i&&"string"==typeof e.selector){var r=Xe.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(r){var o=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),i=e.getBoundingClientRect();return{x:i.left-n.left-t.x,y:i.top-n.top-t.y}}(r,o={x:Qe((n=o).x)?n.x:0,y:Qe(n.y)?n.y:0})}else Ke(e)&&(t=We(e))}else i&&Ke(e)&&(t=We(e));t&&window.scrollTo(t.x,t.y)}var Ze,et=De&&((-1===(Ze=window.navigator.userAgent).indexOf("Android 2.")&&-1===Ze.indexOf("Android 4.0")||-1===Ze.indexOf("Mobile Safari")||-1!==Ze.indexOf("Chrome")||-1!==Ze.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history);function tt(e,t){Ge();var n=window.history;try{if(t){var i=q({},n.state);i.key=Be(),n.replaceState(i,"",e)}else n.pushState({key:ze(He())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function nt(e){tt(e,!0)}function it(e,t,n){var i=function(r){r>=e.length?n():e[r]?t(e[r],(function(){i(r+1)})):i(r+1)};i(0)}function rt(e){return function(t,n,i){var r=!1,o=0,a=null;ot(e,(function(e,t,n,s){if("function"==typeof e&&void 0===e.cid){r=!0,o++;var l,c=lt((function(t){var r;((r=t).__esModule||st&&"Module"===r[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:Ee.extend(t),n.components[s]=t,--o<=0&&i()})),u=lt((function(e){var t="Failed to resolve async component "+s+": "+e;a||(a=z(e)?e:new Error(t),i(a))}));try{l=e(c,u)}catch(e){u(e)}if(l)if("function"==typeof l.then)l.then(c,u);else{var d=l.component;d&&"function"==typeof d.then&&d.then(c,u)}}})),r||i()}}function ot(e,t){return at(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function at(e){return Array.prototype.concat.apply([],e)}var st="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function lt(e){var t=!1;return function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];if(!t)return t=!0,e.apply(this,n)}}var ct=function(e){function t(t){e.call(this),this.name=this._name="NavigationDuplicated",this.message='Navigating to current location ("'+t.fullPath+'") is not allowed',Object.defineProperty(this,"stack",{value:(new e).stack,writable:!0,configurable:!0})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Error);ct._name="NavigationDuplicated";var ut=function(e,t){this.router=e,this.base=function(e){if(!e)if(De){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";"/"!==e.charAt(0)&&(e="/"+e);return e.replace(/\/$/,"")}(t),this.current=re,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[]};function dt(e,t,n,i){var r=ot(e,(function(e,i,r,o){var a=function(e,t){"function"!=typeof e&&(e=Ee.extend(e));return e.options[t]}(e,t);if(a)return Array.isArray(a)?a.map((function(e){return n(e,i,r,o)})):n(a,i,r,o)}));return at(i?r.reverse():r)}function pt(e,t){if(t)return function(){return e.apply(t,arguments)}}ut.prototype.listen=function(e){this.cb=e},ut.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},ut.prototype.onError=function(e){this.errorCbs.push(e)},ut.prototype.transitionTo=function(e,t,n){var i=this,r=this.router.match(e,this.current);this.confirmTransition(r,(function(){i.updateRoute(r),t&&t(r),i.ensureURL(),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(r)})))}),(function(e){n&&n(e),e&&!i.ready&&(i.ready=!0,i.readyErrorCbs.forEach((function(t){t(e)})))}))},ut.prototype.confirmTransition=function(e,t,n){var i=this,r=this.current,o=function(e){!V(ct,e)&&z(e)&&(i.errorCbs.length?i.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)};if(se(e,r)&&e.matched.length===r.matched.length)return this.ensureURL(),o(new ct(e));var a=function(e,t){var n,i=Math.max(e.length,t.length);for(n=0;n<i&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),s=a.updated,l=a.deactivated,c=a.activated,u=[].concat(function(e){return dt(e,"beforeRouteLeave",pt,!0)}(l),this.router.beforeHooks,function(e){return dt(e,"beforeRouteUpdate",pt)}(s),c.map((function(e){return e.beforeEnter})),rt(c));this.pending=e;var d=function(t,n){if(i.pending!==e)return o();try{t(e,r,(function(e){!1===e||z(e)?(i.ensureURL(!0),o(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(o(),"object"==typeof e&&e.replace?i.replace(e):i.push(e)):n(e)}))}catch(e){o(e)}};it(u,d,(function(){var n=[];it(function(e,t,n){return dt(e,"beforeRouteEnter",(function(e,i,r,o){return function(e,t,n,i,r){return function(o,a,s){return e(o,a,(function(e){"function"==typeof e&&i.push((function(){!function e(t,n,i,r){n[i]&&!n[i]._isBeingDestroyed?t(n[i]):r()&&setTimeout((function(){e(t,n,i,r)}),16)}(e,t.instances,n,r)})),s(e)}))}}(e,r,o,t,n)}))}(c,n,(function(){return i.current===e})).concat(i.router.resolveHooks),d,(function(){if(i.pending!==e)return o();i.pending=null,t(e),i.router.app&&i.router.app.$nextTick((function(){n.forEach((function(e){e()}))}))}))}))},ut.prototype.updateRoute=function(e){var t=this.current;this.current=e,this.cb&&this.cb(e),this.router.afterHooks.forEach((function(n){n&&n(e,t)}))};var ft=function(e){function t(t,n){var i=this;e.call(this,t,n);var r=t.options.scrollBehavior,o=et&&r;o&&qe();var a=ht(this.base);window.addEventListener("popstate",(function(e){var n=i.current,r=ht(i.base);i.current===re&&r===a||i.transitionTo(r,(function(e){o&&Je(t,e,n,!0)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var i=this,r=this.current;this.transitionTo(e,(function(e){tt(ue(i.base+e.fullPath)),Je(i.router,e,r,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var i=this,r=this.current;this.transitionTo(e,(function(e){nt(ue(i.base+e.fullPath)),Je(i.router,e,r,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if(ht(this.base)!==this.current.fullPath){var t=ue(this.base+this.current.fullPath);e?tt(t):nt(t)}},t.prototype.getCurrentLocation=function(){return ht(this.base)},t}(ut);function ht(e){var t=decodeURI(window.location.pathname);return e&&0===t.indexOf(e)&&(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var vt=function(e){function t(t,n,i){e.call(this,t,n),i&&function(e){var t=ht(e);if(!/^\/#/.test(t))return window.location.replace(ue(e+"/#"+t)),!0}(this.base)||mt()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this,t=this.router.options.scrollBehavior,n=et&&t;n&&qe(),window.addEventListener(et?"popstate":"hashchange",(function(){var t=e.current;mt()&&e.transitionTo(gt(),(function(i){n&&Je(e.router,i,t,!0),et||_t(i.fullPath)}))}))},t.prototype.push=function(e,t,n){var i=this,r=this.current;this.transitionTo(e,(function(e){bt(e.fullPath),Je(i.router,e,r,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var i=this,r=this.current;this.transitionTo(e,(function(e){_t(e.fullPath),Je(i.router,e,r,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;gt()!==t&&(e?bt(t):_t(t))},t.prototype.getCurrentLocation=function(){return gt()},t}(ut);function mt(){var e=gt();return"/"===e.charAt(0)||(_t("/"+e),!1)}function gt(){var e=window.location.href,t=e.indexOf("#");if(t<0)return"";var n=(e=e.slice(t+1)).indexOf("?");if(n<0){var i=e.indexOf("#");e=i>-1?decodeURI(e.slice(0,i))+e.slice(i):decodeURI(e)}else e=decodeURI(e.slice(0,n))+e.slice(n);return e}function yt(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function bt(e){et?tt(yt(e)):window.location.hash=e}function _t(e){et?nt(yt(e)):window.location.replace(yt(e))}var wt=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var i=this;this.transitionTo(e,(function(e){i.stack=i.stack.slice(0,i.index+1).concat(e),i.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var i=this;this.transitionTo(e,(function(e){i.stack=i.stack.slice(0,i.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var i=this.stack[n];this.confirmTransition(i,(function(){t.index=n,t.updateRoute(i)}),(function(e){V(ct,e)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(ut),xt=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Re(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!et&&!1!==e.fallback,this.fallback&&(t="hash"),De||(t="abstract"),this.mode=t,t){case"history":this.history=new ft(this,e.base);break;case"hash":this.history=new vt(this,e.base,this.fallback);break;case"abstract":this.history=new wt(this,e.base);break;default:0}},St={currentRoute:{configurable:!0}};function Ct(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}xt.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},St.currentRoute.get=function(){return this.history&&this.history.current},xt.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null)})),!this.app){this.app=e;var n=this.history;if(n instanceof ft)n.transitionTo(n.getCurrentLocation());else if(n instanceof vt){var i=function(){n.setupListeners()};n.transitionTo(n.getCurrentLocation(),i,i)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},xt.prototype.beforeEach=function(e){return Ct(this.beforeHooks,e)},xt.prototype.beforeResolve=function(e){return Ct(this.resolveHooks,e)},xt.prototype.afterEach=function(e){return Ct(this.afterHooks,e)},xt.prototype.onReady=function(e,t){this.history.onReady(e,t)},xt.prototype.onError=function(e){this.history.onError(e)},xt.prototype.push=function(e,t,n){var i=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){i.history.push(e,t,n)}));this.history.push(e,t,n)},xt.prototype.replace=function(e,t,n){var i=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){i.history.replace(e,t,n)}));this.history.replace(e,t,n)},xt.prototype.go=function(e){this.history.go(e)},xt.prototype.back=function(){this.go(-1)},xt.prototype.forward=function(){this.go(1)},xt.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},xt.prototype.resolve=function(e,t,n){var i=Le(e,t=t||this.history.current,n,this),r=this.match(i,t),o=r.redirectedFrom||r.fullPath;return{location:i,route:r,href:function(e,t,n){var i="hash"===n?"#"+t:t;return e?ue(e+"/"+i):i}(this.history.base,o,this.mode),normalizedTo:i,resolved:r}},xt.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==re&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(xt.prototype,St),xt.install=function e(t){if(!e.installed||Ee!==t){e.installed=!0,Ee=t;var n=function(e){return void 0!==e},i=function(e,t){var i=e.$options._parentVnode;n(i)&&n(i=i.data)&&n(i=i.registerRouteInstance)&&i(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,i(this,this)},destroyed:function(){i(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",J),t.component("RouterLink",Me);var r=t.config.optionMergeStrategies;r.beforeRouteEnter=r.beforeRouteLeave=r.beforeRouteUpdate=r.created}},xt.version="3.1.6",De&&window.Vue&&window.Vue.use(xt);var kt=xt;i.a.config.productionTip=!1,i.a.use(kt);const Ot=new kt({base:"dist/popup.html",mode:"history",routes:[{path:"/",component:O},{path:"/settings/",component:N},{path:"/settings/developer",component:B}]});S.a.init(),S.a.load(()=>{new i.a({router:Ot,render:e=>e(j)}).$mount("#app")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,